/*!
 * jQuery JavaScript Library v2.0.3  版本
 * http://jquery.com/   官网
 *
 * Includes Sizzle.js   复杂选择器的实现，也是一个独立的库
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2013 jQuery Foundation, Inc. and other contributors   版权
 * Released under the MIT license   合法免费
 * http://jquery.org/license
 *
 * Date: 2013-07-03T13:30Z  更新时间
 */
(function (window, undefined) {
    var  // rootjQuery ： 获取的 document 的 jQuery 对象, 方便压缩，有意义方便后期维护
        // readyList : 与 DOM 加载有关
        // core_strundefined : 'undefined' (字符串的undefined) 针对老版本 IE9 等可能识别不出来，所以用 typeof 的写法来识别变量是否存在
        rootjQuery, readyList, core_strundefined = typeof undefined,
        location = window.location, // 网址信息
        document = window.document, // document 对象
        docElem = document.documentElement, // html 标签
        // 保存外部可能定义的 jQuery | $ 变量，防止造成冲突
        _jQuery = window.jQuery,
        _$ = window.$,
        class2type = {},  // 做类型判断用，{'[Object String]':'string','[Object Array]':'array'}
        core_deletedIds = [],  // 与数组缓存相关，不过在1.x版本用到，2.x版本基本用不到了
        core_version = "2.0.3", // 版本号
        core_concat = core_deletedIds.concat,  // 数组和对象方法的局部存储， 方便使用、压缩
        core_push = core_deletedIds.push,
        core_slice = core_deletedIds.slice,
        core_indexOf = core_deletedIds.indexOf,
        core_toString = class2type.toString,
        core_hasOwn = class2type.hasOwnProperty,
        core_trim = core_version.trim, // 去前后空格
        jQuery = function (selector, context) {
            return new jQuery.fn.init(selector, context, rootjQuery); // init 为构造函数， 返回 jQuery 对象, 省去用户手动 new 的步骤
            // 其中 fn 就是 jquery.prototype
        },
        core_pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source, // 正数、负数，小数点，包括科学计数法
        core_rnotwhite = /\S+/g, // 匹配空格
        rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/, // 匹配 html 标签，和 #id, 防止XSS通过location.hash
        rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,  // 匹配没有闭合的 html 标签
        rmsPrefix = /^-ms-/,  // ie 前缀，与 css3 有关
        rdashAlpha = /-([\da-z])/gi, // 找 -字符 ，转成 大写字符，与 css3 有关
        fcamelCase = function (all, letter) {  // 转驼峰命名
            return letter.toUpperCase();
        },
        completed = function () { // dom 加载成功之后触发
            // 触发 completed 之后，将添加的事件移除
            document.removeEventListener("DOMContentLoaded", completed, false);
            window.removeEventListener("load", completed, false);
            jQuery.ready();
        };
    // 实例的一些属性和方法
    jQuery.fn = jQuery.prototype = {
        jquery: core_version, // 版本
        constructor: jQuery, // 构造函数，prototype直接被对象赋值，so need 修正指向
        // 初始化和参数管理
        init: function (selector, context, rootjQuery) {
            // context 上下文，这里指 document，也可是 iframe的 contentWindow.document
            // selector 选择器，例如： '#id'、'<li></li>'
            // rootjQuery : $(document)
            var match, elem;
            if (!selector) { // handle： $(''),$(null),$(undefined),$(false)
                return this;
            }
            // handle html string, exp: $('#div .box')【选择】, $('<li>1</li>')【新创建】
            if (typeof selector === "string") {
                if (selector.charAt(0) === "<" && selector.charAt(selector.length - 1) === ">" && selector.length >=
                    3) {  // '<li>1</li>'
                    match = [null, selector, null];  // selector = '<li>1</li>'
                } else {
                    match = rquickExpr.exec(selector); // selector = '<li>hellO' '#id' exec检索匹配的字符，返回数组
                }
                // 创建标签，或者 (#id , 并且没有上下文)
                if (match && (match[1] || !context)) {
                    // 创建的标签
                    if (match[1]) {
                        // jQuery.prototype 是否在 context 的原型链上，在则 context[0]
                        // $(document) instanceof jQuery -> true -> $(document)[0]
                        // document instanceof jQuery -> false -> document
                        // 创建标签的上下文
                        context = context instanceof jQuery ? context[0] : context;
                        // merge : 将两个数组合并到第一个传参数组中【对外】，在 jquery 中可以对 json（类数组） 进行合并
                        // 比如 merge({0: 'a', 1: 'b', length: 2}, ['c', 'd'])
                        // parseHTML ：把 html 字符串分析成一个 dom 结点的数组，第二个参数上下文，第三个参数是否包含 script 标签，默认false
                        jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context
                            .ownerDocument || context : document, true)); // 得到类似： this = {0: 'li', 1: 'li', length: 2}
                        if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                            // handle: $(html, props)
                            // 未闭合标签|满足单标签 && context 是一个纯粹的对象
                            for (match in context) {
                                // properties of context are called as methods if possible
                                if (jQuery.isFunction(this[match])) {
                                    this[match](context[match]);
                                    // ... and otherwise set as attributes
                                } else {
                                    this.attr(match, context[match]);
                                }
                            }
                        }
                        return this;
                    } else {
                        // #id
                        elem = document.getElementById(match[2]);
                        if (elem && elem.parentNode) {
                            this.length = 1;
                            this[0] = elem;
                        }
                        this.context = document;
                        this.selector = selector;
                        return this;
                    }
                    // handle: $(expr, $(...)), 与下面相同，但是这里 context 是 jquery 对象
                } else if (!context || context.jquery) {
                    return (context || rootjQuery).find(selector);
                    // handle: $(expr, context) = $(context).find(expr), context 不是 jquery 对象
                } else {
                    return this.constructor(context).find(selector);
                }
                // handle: $(DOMElement), exp: $(this),$(document)
            } else if (selector.nodeType) {
                this.context = this[0] = selector;
                this.length = 1;
                return this;
                // handle: $(function), exp: $(function(){})
                // shortcut for document ready
            } else if (jQuery.isFunction(selector)) {
                return rootjQuery.ready(selector);
            }
            // 防止这种情况 ： $($('#div1))
            if (selector.selector !== undefined) {
                this.selector = selector.selector;
                this.context = selector.context;
            }
            // handle other : $([]), $({})
            // makeArray：把类数组转成真正的数组的方法【外部使用】
            // 两个参数给内部使用，可以转成 json 格式
            return jQuery.makeArray(selector, this);
        },
        selector: "", // 存储选择字符串
        length: 0, // this 对象的长度
        // 转数组
        toArray: function () {
            return core_slice.call(this);
        },
        // 转原生集合
        get: function (num) {
            return num == null ? this.toArray() : (num < 0 ? this[this.length + num] : this[num]);
        },
        // JQ 对象的入栈
        // 返回一个新的匹配元素集合
        pushStack: function (elems) {
            var ret = jQuery.merge(this.constructor(), elems);
            ret.prevObject = this; // 中间给新入栈的元素设置 prevObject 指向指定元素
            ret.context = this.context; // 修改上下文
            return ret;
        },
        // 遍历集合， 实例方法调用了工具方法 each
        // 加强版的 for 循环
        each: function (callback, args) {
            return jQuery.each(this, callback, args);
        },
        // dom 加载的接口
        ready: function (fn) {
            jQuery.ready.promise().done(fn);  // add the callback
            return this;
        },
        // 集合的截取
        slice: function () {
            return this.pushStack(core_slice.apply(this, arguments));
        },
        // 集合的第一项
        first: function () {
            return this.eq(0);
        },
        // 集合的最后一项
        last: function () {
            return this.eq(-1);
        },
        // 集合的指定项
        eq: function (i) {
            var len = this.length,
                j = +i + (i < 0 ? len : 0);
            return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
        },
        // 返回新集合,通过工具方法 map
        map: function (callback) {
            return this.pushStack(jQuery.map(this, function (elem, i) {
                return callback.call(elem, i, elem);
            }));
        },
        // 返回集合前一个状态
        end: function () {
            return this.prevObject || this.constructor(null);
        },
        // 内部使用， 数组中常用的三个方法
        push: core_push,
        // 内部使用
        sort: [].sort,
        // 内部使用
        splice: [].splice
    };
    // give the init function the jQuery prototype for later instantiation
    // 为 init 函数提供 jQuery 原型，以便以后实例化
    jQuery.fn.init.prototype = jQuery.fn;
    // 简化版 extend 继承方法 - 拷贝继承
    // 扩展静态方法 
    jQuery.extend = jQuery.fn.extend = function () {
        var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, // 被拷贝的目标
            i = 1,
            length = arguments.length,
            deep = false;
        // 是不是深拷贝，默认浅拷贝
        if (typeof target === "boolean") {
            deep = target;
            target = arguments[1] || {};
            i = 2;
        }
        // 检查参数是否正确
        if (typeof target !== "object" && !jQuery.isFunction(target)) {
            target = {};
        }
        // 是否是插件情况
        if (length === i) {
            target = this;
            --i;
        }
        // 可能有多个对象情况
        for (; i < length; i++) {
            if ((options = arguments[i]) != null) {
                for (name in options) {
                    src = target[name];
                    copy = options[name];
                    // 防止循环引用，exp: $.extend(a, {name: a})
                    if (target === copy) {
                        continue;
                    }
                    // 深拷贝，递归
                    // copy 有值且为对象 或者 array
                    if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
                        if (copyIsArray) {
                            copyIsArray = false;
                            clone = src && jQuery.isArray(src) ? src : [];
                        } else {
                            clone = src && jQuery.isPlainObject(src) ? src : {};
                        }
                        target[name] = jQuery.extend(deep, clone, copy);
                        // 浅拷贝
                    } else if (copy !== undefined) {
                        target[name] = copy;
                    }
                }
            }
        }
        return target;
    };
    // jQuery 的 工具方法们
    jQuery.extend({
        // 生成唯一 JQ 字符串（内部）
        expando: "jQuery" + (core_version + Math.random()).replace(/\D/g, ""),
        // 防止冲突
        noConflict: function (deep) {
            if (window.$ === jQuery) {
                window.$ = _$; // 还原外部自定义的 $ 变量
            }
            // deep : 是否还原
            if (deep && window.jQuery === jQuery) {
                window.jQuery = _jQuery; // 还原外部自定义的 jquery 变量
            }
            return jQuery;
        },
        // DOM 是否加载完 （内部）
        isReady: false,
        // 等待多少文件的计数器（内部）
        readyWait: 1,
        // 推迟 DOM 触发，比如在动态 getScript 某个 js 文件之后再触发
        holdReady: function (hold) {
            if (hold) { // 是推迟触发
                jQuery.readyWait++;
            } else {
                jQuery.ready(true); // 不是推迟触发
            }
        },
        // 准备 DOM 触发
        ready: function (wait) {
            // 配合 holdReady 【推迟dom触发】，进行 --
            if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
                return;
            }
            jQuery.isReady = true;
            if (wait !== true && --jQuery.readyWait > 0) {
                return;
            }
            readyList.resolveWith(document, [jQuery]); // 进行传参处理
            if (jQuery.fn.trigger) {  // 是否有主动触发的方法，如果有，就触发之后取消掉
                // dom 触发有三种不同的方式，$(function(){}) \ $(document).ready(function(){}) \ $(document).on('ready',function(){})
                jQuery(document).trigger("ready").off("ready");
            }
        },
        // 是否为函数，其中不支持在低版本ie下面的alert（->object）等的函数判断
        isFunction: function (obj) {
            return jQuery.type(obj) === "function";
        },
        // 是否为数组，尽量原生就用原生的
        isArray: Array.isArray,
        // 是否为 window
        isWindow: function (obj) {
            // 除了 undefined 和 null 其他都可以相等
            // obj.window 全局对象下面的浏览器窗口
            return obj != null && obj === obj.window;
        },
        // 是否为数字
        isNumeric: function (obj) {
            // 不是 NaN 并且 是有限数字
            return !isNaN(parseFloat(obj)) && isFinite(obj);
        },
        // 判断数据类型，比 typeof 强
        type: function (obj) {
            if (obj == null) {
                return String(obj);
            }
            // 如果不是 object 或者 function 则 直接 typeof 
            // 否则进行 相应的查找 Boolean Number String Function Array Date RegExp Object Error
            // 在 六百多行、、、
            // toString 
            return typeof obj === "object" || typeof obj === "function" ? class2type[core_toString.call(
                obj)] || "object" : typeof obj;
        },
        // 是否为对象自变量,满足 {...} 和 new Object() 形式即为 true
        isPlainObject: function (obj) {
            // 不是对象自变量
            // - 类型不为 "[object Object]"
            // - DOM 节点
            // - window
            if (jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) {
                return false;
            }
            // 支持 火狐<20 
            // 其他排除，用 constructor 来排除特定的错误，例如 window.location...
            try {
                if (obj.constructor && !core_hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
                    return false;
                }
            } catch (e) {
                return false;
            }
            // 是 object 类型
            return true;
        },
        // 是否为空对象
        isEmptyObject: function (obj) {
            var name;
            for (name in obj) { // 利用 for in
                return false;
            }
            return true;
        },
        // 抛出异常
        error: function (msg) {
            throw new Error(msg); // 原生就这样用。
        },
        // 将字符串解析节点
        parseHTML: function (data, context, keepScripts) {
            if (!data || typeof data !== "string") { // 判断 data 是否是字符串
                return null;
            }
            if (typeof context === "boolean") { // 不指定上下文时，只传入两个参数，data 和 keepScripts
                keepScripts = context; // 赋值到 script 配置原位
                context = false; // 没有指定上下文，设置
            }
            context = context || document; // 设置 context
            var parsed = rsingleTag.exec(data), // 判断是否是单标签
                scripts = !keepScripts && []; // 判断是否解析 script 标签
            if (parsed) {
                return [context.createElement(parsed[1])]; // 直接创建即可
            }
            parsed = jQuery.buildFragment([data], context, scripts); // 通过文档碎片的形式创建 dom
            if (scripts) {
                jQuery(scripts).remove();
            }
            return jQuery.merge([], parsed.childNodes); // 转成数组
        },
        // 解析 JSON
        parseJSON: JSON.parse,
        // 解析 XML
        parseXML: function (data) {
            var xml, tmp;
            if (!data || typeof data !== "string") { // 对字符串判断
                return null;
            }
            // 支持 IE9
            try {
                tmp = new DOMParser();  // 陆续支持 DOMParser(), ie6.7.8. 用 ActiveXObject 来解析 xml
                xml = tmp.parseFromString(data, "text/xml");
            } catch (e) {
                xml = undefined;
            }
            // 其他浏览器，如火狐会出现 parsererror 错误信息
            if (!xml || xml.getElementsByTagName("parsererror").length) {
                jQuery.error("Invalid XML: " + data);
            }
            return xml;
        },
        // 空函数, 作用是给一些默认参数进行赋值，进行容错处理
        noop: function () { },
        // 将 js 代码解析成全局的
        globalEval: function (code) {
            var script, indirect = eval;
            code = jQuery.trim(code);
            if (code) {
                if (code.indexOf("use strict") === 1) { // 严格模式下不支持 eval
                    script = document.createElement("script");
                    script.text = code;
                    document.head.appendChild(script).parentNode.removeChild(script);
                } else {
                    indirect(code);
                }
            }
        },
        // 转驼峰，ie 下 -ms 特别处理
        camelCase: function (string) {
            return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
        },
        // 是否为指定节点名（内部）
        nodeName: function (elem, name) {
            return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase(); // 转小写来兼容浏览器 
        },
        // 遍历集合
        each: function (obj, callback, args) {
            var value, i = 0,
                length = obj.length,
                isArray = isArraylike(obj);
            if (args) { // 是内部使用
                if (isArray) { // 数组遍历
                    for (; i < length; i++) {
                        value = callback.apply(obj[i], args); // 无定参
                        if (value === false) {
                            break;
                        }
                    }
                } else { // json 遍历
                    for (i in obj) {
                        value = callback.apply(obj[i], args);
                        if (value === false) {
                            break;
                        }
                    }
                }
            } else { // 不是内部使用
                if (isArray) { // 数组遍历
                    for (; i < length; i++) {
                        value = callback.call(obj[i], i, obj[i]); // 定参
                        if (value === false) {
                            break;
                        }
                    }
                } else { // json 遍历
                    for (i in obj) {
                        value = callback.call(obj[i], i, obj[i]);
                        if (value === false) {
                            break;
                        }
                    }
                }
            }
            return obj;
        },
        // 去前后空格
        trim: function (text) {
            return text == null ? "" : core_trim.call(text); // 对 str.trim 进行了前后封装
        },
        // 类数组、字符串... 转真数组
        makeArray: function (arr, results) {
            var ret = results || []; // 可一个参可两个参
            if (arr != null) {
                if (isArraylike(Object(arr))) {
                    jQuery.merge(ret, typeof arr === "string" ? [arr] : arr); // 实际还是利用 merge 函数
                } else {
                    core_push.call(ret, arr);
                }
            }
            return ret;
        },
        // 数组版 indexOf
        inArray: function (elem, arr, i) {
            return arr == null ? -1 : core_indexOf.call(arr, elem, i);
        },
        // 合并数组，second 合并到 first 上面
        merge: function (first, second) {
            var l = second.length,
                i = first.length,
                j = 0;
            if (typeof l === "number") { // 判断第二个是否有长度
                for (; j < l; j++) {
                    first[i++] = second[j];
                }
            } else {
                while (second[j] !== undefined) {
                    first[i++] = second[j++];
                }
            }
            first.length = i;
            return first;
        },
        // 过滤新数组
        grep: function (elems, callback, inv) {
            var retVal, ret = [],
                i = 0,
                length = elems.length;
            inv = !!inv; // 通过第三个参数来控制是否是选择符合 callback 条件的那一集合
            for (; i < length; i++) {
                retVal = !!callback(elems[i], i);
                if (inv !== retVal) {
                    ret.push(elems[i]);
                }
            }
            return ret;
        },
        // 映射新数组
        map: function (elems, callback, arg) {
            var value, i = 0,
                length = elems.length,
                isArray = isArraylike(elems),
                ret = [];
            if (isArray) { // 数组
                for (; i < length; i++) {
                    value = callback(elems[i], i, arg);
                    if (value != null) {
                        ret[ret.length] = value;
                    }
                }
            } else { // 对象
                for (i in elems) {
                    value = callback(elems[i], i, arg);
                    if (value != null) {
                        ret[ret.length] = value;
                    }
                }
            }
            return core_concat.apply([], ret); // 防止复合数组，得到单一数组，相当于将二维数组转为一维数组
        },
        // 唯一标识符（内部）
        guid: 1,
        // 改 this 指向
        proxy: function (fn, context) {
            var tmp, args, proxy;
            if (typeof context === "string") { // 支持 $.proxy(obj, 'show'): 将 obj 对象的 show 方法的 this 指向 obj 
                // 转为 $.proxy(obj.show, obj)
                tmp = fn[context];
                context = fn;
                fn = tmp;
            }
            if (!jQuery.isFunction(fn)) { // fn 必须为函数
                return undefined;
            }
            args = core_slice.call(arguments, 2);  // 利用 call 和 apply 方法来改 this 指向
            proxy = function () {
                return fn.apply(context || this, args.concat(core_slice.call(arguments)));
            };
            proxy.guid = fn.guid = fn.guid || jQuery.guid++; // 设定唯一标识，为之后删除等等操作
            return proxy;
        },
        // 多功能值操作（内部）
        access: function (elems, fn, key, value, chainable, emptyGet, raw) {
            /**
             * 参数说明：
             * elems：操作的元素集
             * fn：回调函数
             * key: 设置的 key 值，例如：width
             * value: 设置的 value 值, 例如： '300px'
             * chainable: 布尔类型，控制设置或者获取
             * emptyGet: 
             * raw: 如果 value 是字符串则为 true
             */
            var i = 0,
                length = elems.length,
                bulk = key == null; // 判断 key 是否为 null，不是则为 false，是则为 true
            if (jQuery.type(key) === "object") { // 设置多组值，是否以 json 格式写的
                chainable = true;
                for (i in key) {
                    jQuery.access(elems, fn, i, key[i], true, emptyGet, raw); // 递归
                }
            } else if (value !== undefined) { // 设置一组值的情况，value 必须有值
                chainable = true;
                if (!jQuery.isFunction(value)) { // value 是否为函数
                    raw = true;
                }
                if (bulk) { // key 为 null 时
                    if (raw) { // 设置了 value 字符串
                        fn.call(elems, value); // 执行 fn 
                        fn = null;
                    } else { // value 是一个函数时
                        bulk = fn;
                        fn = function (elem, key, value) {
                            return bulk.call(jQuery(elem), value);
                        }; // 先套上，不执行
                    }
                }
                if (fn) { // 有回调的时候
                    for (; i < length; i++) {
                        // 调用相应的 fn，其中判断 value 是否是函数
                        fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
                    }
                }
            }
            // 是设置，返回元素集合，可以进行链式运算；如果不是设置，就是获取，没有key值是调用获取即可；
            // 如果是设置，元素集合长度大于 0 时，返回第一个元素；否则没有操作，返回 undefined
            return chainable ? elems : bulk ? fn.call(elems) : length ? fn(elems[0], key) : emptyGet;
        },
        // 当前时间, 高版本兼容性较高
        now: Date.now,
        // CSS 交换（内部）
        swap: function (elem, options, callback, args) {
            var ret, name, old = {};
            for (name in options) {
                old[name] = elem.style[name]; // 把旧样式存到 old 上面
                elem.style[name] = options[name]; // 将设置 给当前元素，比如 display: block;visibility:hidden;position:absolute;
            }
            ret = callback.apply(elem, args || []); // 获取到某个值，比如宽度
            for (name in options) {
                elem.style[name] = old[name]; // 还原回旧样式
            }
            return ret; // 返回获取的值
        }
    });
    // 监测 DOM 的异步操作（内部）
    jQuery.ready.promise = function (obj) {
        // 第一次没有值
        if (!readyList) {
            // 创建延迟对象
            readyList = jQuery.Deferred();
            // 当 document 完成加载的时候，用一个定时器(针对ie)触发 jQuery.ready
            if (document.readyState === "complete") {
                setTimeout(jQuery.ready);
            } else {
                // 可能 dom 没有加载完，进行监测
                document.addEventListener("DOMContentLoaded", completed, false);
                // 防止有些浏览器缓存直接触发 load 事件
                window.addEventListener("load", completed, false);
            }
        }
        // 延迟对象的状态有完成和未完成，在外部可以修改状态，但是promise可以起到不能修改状态的作用
        return readyList.promise(obj);
    };
    jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function (i, name) {
        class2type["[object " + name + "]"] = name.toLowerCase();
    });
    // 类似数组的判断（内部），数组 | 类数组
    function isArraylike(obj) {
        var length = obj.length,
            type = jQuery.type(obj);
        if (jQuery.isWindow(obj)) { // 排除 window
            return false;
        }
        if (obj.nodeType === 1 && length) { // 节点值为1是元素节点，有长度，就是 elements 集合
            return true;
        }
        return type === "array" || type !== "function" && (length === 0 || typeof length === "number" && length > 0 &&
            (length - 1) in obj);
    }
    rootjQuery = jQuery(document); // 根目录
    /*!
     * Sizzle CSS Selector Engine v1.9.4-pre
     * http://sizzlejs.com/
     *
     * Copyright 2013 jQuery Foundation, Inc. and other contributors
     * Released under the MIT license
     * http://jquery.org/license
     *
     * Date: 2013-06-03
     */
    (function (window, undefined) {
        var i, support, cachedruns, Expr, getText, isXML, compile, outermostContext, sortInput, setDocument,
            document, docElem, documentIsHTML, rbuggyQSA, rbuggyMatches, matches, contains, expando = "sizzle" +
                -(new Date()),
            preferredDoc = window.document,
            dirruns = 0,
            done = 0,
            classCache = createCache(),
            tokenCache = createCache(),
            compilerCache = createCache(),
            hasDuplicate = false,
            sortOrder = function (a, b) {
                if (a === b) {
                    hasDuplicate = true;
                    return 0;
                }
                return 0;
            },
            strundefined = typeof undefined,
            MAX_NEGATIVE = 1 << 31,
            hasOwn = ({}).hasOwnProperty,
            arr = [],
            pop = arr.pop,
            push_native = arr.push,
            push = arr.push,
            slice = arr.slice,
            indexOf = arr.indexOf || function (elem) {
                var i = 0,
                    len = this.length;
                for (; i < len; i++) {
                    if (this[i] === elem) {
                        return i;
                    }
                }
                return -1;
            },
            booleans =
                "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
            whitespace = "[\\x20\\t\\r\\n\\f]",
            characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
            identifier = characterEncoding.replace("w", "w#"),
            attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
                "*(?:([*^$|!~]?=)" + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" +
                whitespace + "*\\]",
            pseudos = ":(" + characterEncoding +
                ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + attributes.replace(3, 8) +
                ")*)|.*)\\)|)",
            rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),
            rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
            rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
            rsibling = new RegExp(whitespace + "*[+~]"),
            rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*)" + whitespace + "*\\]", "g"),
            rpseudo = new RegExp(pseudos),
            ridentifier = new RegExp("^" + identifier + "$"),
            matchExpr = {
                "ID": new RegExp("^#(" + characterEncoding + ")"),
                "CLASS": new RegExp("^\\.(" + characterEncoding + ")"),
                "TAG": new RegExp("^(" + characterEncoding.replace("w", "w*") + ")"),
                "ATTR": new RegExp("^" + attributes),
                "PSEUDO": new RegExp("^" + pseudos),
                "CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
                    "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
                    "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
                "bool": new RegExp("^(?:" + booleans + ")$", "i"),
                "needsContext": new RegExp("^" + whitespace +
                    "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
                    whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
            },
            rnative = /^[^{]+\{\s*\[native \w/,
            rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
            rinputs = /^(?:input|select|textarea|button)$/i,
            rheader = /^h\d$/i,
            rescape = /'|\\/g,
            runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"),
            funescape = function (_, escaped, escapedWhitespace) {
                var high = "0x" + escaped - 0x10000;
                return high !== high || escapedWhitespace ? escaped : high < 0 ? String.fromCharCode(high +
                    0x10000) : String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
            };
        try {
            push.apply((arr = slice.call(preferredDoc.childNodes)), preferredDoc.childNodes);
            arr[preferredDoc.childNodes.length].nodeType;
        } catch (e) {
            push = {
                apply: arr.length ? function (target, els) {
                    push_native.apply(target, slice.call(els));
                } : function (target, els) {
                    var j = target.length,
                        i = 0;
                    while ((target[j++] = els[i++])) { }
                    target.length = j - 1;
                }
            };
        }

        function Sizzle(selector, context, results, seed) {
            var match, elem, m, nodeType, i, groups, old, nid, newContext, newSelector;
            if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
                setDocument(context);
            }
            context = context || document;
            results = results || [];
            if (!selector || typeof selector !== "string") {
                return results;
            }
            if ((nodeType = context.nodeType) !== 1 && nodeType !== 9) {
                return [];
            }
            if (documentIsHTML && !seed) {
                if ((match = rquickExpr.exec(selector))) {
                    if ((m = match[1])) {
                        if (nodeType === 9) {
                            elem = context.getElementById(m);
                            if (elem && elem.parentNode) {
                                if (elem.id === m) {
                                    results.push(elem);
                                    return results;
                                }
                            } else {
                                return results;
                            }
                        } else {
                            if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) &&
                                contains(context, elem) && elem.id === m) {
                                results.push(elem);
                                return results;
                            }
                        }
                    } else if (match[2]) {
                        push.apply(results, context.getElementsByTagName(selector));
                        return results;
                    } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {
                        push.apply(results, context.getElementsByClassName(m));
                        return results;
                    }
                }
                if (support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
                    nid = old = expando;
                    newContext = context;
                    newSelector = nodeType === 9 && selector;
                    if (nodeType === 1 && context.nodeName.toLowerCase() !== "object") {
                        groups = tokenize(selector);
                        if ((old = context.getAttribute("id"))) {
                            nid = old.replace(rescape, "\\$&");
                        } else {
                            context.setAttribute("id", nid);
                        }
                        nid = "[id='" + nid + "'] ";
                        i = groups.length;
                        while (i--) {
                            groups[i] = nid + toSelector(groups[i]);
                        }
                        newContext = rsibling.test(selector) && context.parentNode || context;
                        newSelector = groups.join(",");
                    }
                    if (newSelector) {
                        try {
                            push.apply(results, newContext.querySelectorAll(newSelector));
                            return results;
                        } catch (qsaError) { } finally {
                            if (!old) {
                                context.removeAttribute("id");
                            }
                        }
                    }
                }
            }
            return select(selector.replace(rtrim, "$1"), context, results, seed);
        }

        function createCache() {
            var keys = [];

            function cache(key, value) {
                if (keys.push(key += " ") > Expr.cacheLength) {
                    delete cache[keys.shift()];
                }
                return (cache[key] = value);
            }
            return cache;
        }

        function markFunction(fn) {
            fn[expando] = true;
            return fn;
        }

        function assert(fn) {
            var div = document.createElement("div");
            try {
                return !!fn(div);
            } catch (e) {
                return false;
            } finally {
                if (div.parentNode) {
                    div.parentNode.removeChild(div);
                }
                div = null;
            }
        }

        function addHandle(attrs, handler) {
            var arr = attrs.split("|"),
                i = attrs.length;
            while (i--) {
                Expr.attrHandle[arr[i]] = handler;
            }
        }

        function siblingCheck(a, b) {
            var cur = b && a,
                diff = cur && a.nodeType === 1 && b.nodeType === 1 && (~b.sourceIndex || MAX_NEGATIVE) -
                    (~a.sourceIndex || MAX_NEGATIVE);
            if (diff) {
                return diff;
            }
            if (cur) {
                while ((cur = cur.nextSibling)) {
                    if (cur === b) {
                        return -1;
                    }
                }
            }
            return a ? 1 : -1;
        }

        function createInputPseudo(type) {
            return function (elem) {
                var name = elem.nodeName.toLowerCase();
                return name === "input" && elem.type === type;
            };
        }

        function createButtonPseudo(type) {
            return function (elem) {
                var name = elem.nodeName.toLowerCase();
                return (name === "input" || name === "button") && elem.type === type;
            };
        }

        function createPositionalPseudo(fn) {
            return markFunction(function (argument) {
                argument = +argument;
                return markFunction(function (seed, matches) {
                    var j, matchIndexes = fn([], seed.length, argument),
                        i = matchIndexes.length;
                    while (i--) {
                        if (seed[(j = matchIndexes[i])]) {
                            seed[j] = !(matches[j] = seed[j]);
                        }
                    }
                });
            });
        }
        isXML = Sizzle.isXML = function (elem) {
            var documentElement = elem && (elem.ownerDocument || elem).documentElement;
            return documentElement ? documentElement.nodeName !== "HTML" : false;
        };
        support = Sizzle.support = {};
        setDocument = Sizzle.setDocument = function (node) {
            var doc = node ? node.ownerDocument || node : preferredDoc,
                parent = doc.defaultView;
            if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
                return document;
            }
            document = doc;
            docElem = doc.documentElement;
            documentIsHTML = !isXML(doc);
            if (parent && parent.attachEvent && parent !== parent.top) {
                parent.attachEvent("onbeforeunload", function () {
                    setDocument();
                });
            }
            support.attributes = assert(function (div) {
                div.className = "i";
                return !div.getAttribute("className");
            });
            support.getElementsByTagName = assert(function (div) {
                div.appendChild(doc.createComment(""));
                return !div.getElementsByTagName("*").length;
            });
            support.getElementsByClassName = assert(function (div) {
                div.innerHTML = "<div class='a'></div><div class='a i'></div>";
                div.firstChild.className = "i";
                return div.getElementsByClassName("i").length === 2;
            });
            support.getById = assert(function (div) {
                docElem.appendChild(div).id = expando;
                return !doc.getElementsByName || !doc.getElementsByName(expando).length;
            });
            if (support.getById) {
                Expr.find["ID"] = function (id, context) {
                    if (typeof context.getElementById !== strundefined && documentIsHTML) {
                        var m = context.getElementById(id);
                        return m && m.parentNode ? [m] : [];
                    }
                };
                Expr.filter["ID"] = function (id) {
                    var attrId = id.replace(runescape, funescape);
                    return function (elem) {
                        return elem.getAttribute("id") === attrId;
                    };
                };
            } else {
                delete Expr.find["ID"];
                Expr.filter["ID"] = function (id) {
                    var attrId = id.replace(runescape, funescape);
                    return function (elem) {
                        var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode(
                            "id");
                        return node && node.value === attrId;
                    };
                };
            }
            Expr.find["TAG"] = support.getElementsByTagName ? function (tag, context) {
                if (typeof context.getElementsByTagName !== strundefined) {
                    return context.getElementsByTagName(tag);
                }
            } : function (tag, context) {
                var elem, tmp = [],
                    i = 0,
                    results = context.getElementsByTagName(tag);
                if (tag === "*") {
                    while ((elem = results[i++])) {
                        if (elem.nodeType === 1) {
                            tmp.push(elem);
                        }
                    }
                    return tmp;
                }
                return results;
            };
            Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) {
                if (typeof context.getElementsByClassName !== strundefined && documentIsHTML) {
                    return context.getElementsByClassName(className);
                }
            };
            rbuggyMatches = [];
            rbuggyQSA = [];
            if ((support.qsa = rnative.test(doc.querySelectorAll))) {
                assert(function (div) {
                    div.innerHTML = "<select><option selected=''></option></select>";
                    if (!div.querySelectorAll("[selected]").length) {
                        rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
                    }
                    if (!div.querySelectorAll(":checked").length) {
                        rbuggyQSA.push(":checked");
                    }
                });
                assert(function (div) {
                    var input = doc.createElement("input");
                    input.setAttribute("type", "hidden");
                    div.appendChild(input).setAttribute("t", "");
                    if (div.querySelectorAll("[t^='']").length) {
                        rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
                    }
                    if (!div.querySelectorAll(":enabled").length) {
                        rbuggyQSA.push(":enabled", ":disabled");
                    }
                    div.querySelectorAll("*,:x");
                    rbuggyQSA.push(",.*:");
                });
            }
            if ((support.matchesSelector = rnative.test((matches = docElem.webkitMatchesSelector || docElem
                .mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)))) {
                assert(function (div) {
                    support.disconnectedMatch = matches.call(div, "div");
                    matches.call(div, "[s!='']:x");
                    rbuggyMatches.push("!=", pseudos);
                });
            }
            rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
            rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));
            contains = rnative.test(docElem.contains) || docElem.compareDocumentPosition ? function (a, b) {
                var adown = a.nodeType === 9 ? a.documentElement : a,
                    bup = b && b.parentNode;
                return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(
                    bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
            } : function (a, b) {
                if (b) {
                    while ((b = b.parentNode)) {
                        if (b === a) {
                            return true;
                        }
                    }
                }
                return false;
            };
            sortOrder = docElem.compareDocumentPosition ? function (a, b) {
                if (a === b) {
                    hasDuplicate = true;
                    return 0;
                }
                var compare = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition(
                    b);
                if (compare) {
                    if (compare & 1 || (!support.sortDetached && b.compareDocumentPosition(a) ===
                        compare)) {
                        if (a === doc || contains(preferredDoc, a)) {
                            return -1;
                        }
                        if (b === doc || contains(preferredDoc, b)) {
                            return 1;
                        }
                        return sortInput ? (indexOf.call(sortInput, a) - indexOf.call(sortInput, b)) :
                            0;
                    }
                    return compare & 4 ? -1 : 1;
                }
                return a.compareDocumentPosition ? -1 : 1;
            } : function (a, b) {
                var cur, i = 0,
                    aup = a.parentNode,
                    bup = b.parentNode,
                    ap = [a],
                    bp = [b];
                if (a === b) {
                    hasDuplicate = true;
                    return 0;
                } else if (!aup || !bup) {
                    return a === doc ? -1 : b === doc ? 1 : aup ? -1 : bup ? 1 : sortInput ? (indexOf.call(
                        sortInput, a) - indexOf.call(sortInput, b)) : 0;
                } else if (aup === bup) {
                    return siblingCheck(a, b);
                }
                cur = a;
                while ((cur = cur.parentNode)) {
                    ap.unshift(cur);
                }
                cur = b;
                while ((cur = cur.parentNode)) {
                    bp.unshift(cur);
                }
                while (ap[i] === bp[i]) {
                    i++;
                }
                return i ? siblingCheck(ap[i], bp[i]) : ap[i] === preferredDoc ? -1 : bp[i] ===
                    preferredDoc ? 1 : 0;
            };
            return doc;
        };
        Sizzle.matches = function (expr, elements) {
            return Sizzle(expr, null, null, elements);
        };
        Sizzle.matchesSelector = function (elem, expr) {
            if ((elem.ownerDocument || elem) !== document) {
                setDocument(elem);
            }
            expr = expr.replace(rattributeQuotes, "='$1']");
            if (support.matchesSelector && documentIsHTML && (!rbuggyMatches || !rbuggyMatches.test(expr)) &&
                (!rbuggyQSA || !rbuggyQSA.test(expr))) {
                try {
                    var ret = matches.call(elem, expr);
                    if (ret || support.disconnectedMatch || elem.document && elem.document.nodeType !== 11) {
                        return ret;
                    }
                } catch (e) { }
            }
            return Sizzle(expr, document, null, [elem]).length > 0;
        };
        Sizzle.contains = function (context, elem) {
            if ((context.ownerDocument || context) !== document) {
                setDocument(context);
            }
            return contains(context, elem);
        };
        Sizzle.attr = function (elem, name) {
            if ((elem.ownerDocument || elem) !== document) {
                setDocument(elem);
            }
            var fn = Expr.attrHandle[name.toLowerCase()],
                val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !
                    documentIsHTML) : undefined;
            return val === undefined ? support.attributes || !documentIsHTML ? elem.getAttribute(name) : (
                val = elem.getAttributeNode(name)) && val.specified ? val.value : null : val;
        };
        Sizzle.error = function (msg) {
            throw new Error("Syntax error, unrecognized expression: " + msg);
        };
        Sizzle.uniqueSort = function (results) {
            var elem, duplicates = [],
                j = 0,
                i = 0;
            hasDuplicate = !support.detectDuplicates;
            sortInput = !support.sortStable && results.slice(0);
            results.sort(sortOrder);
            if (hasDuplicate) {
                while ((elem = results[i++])) {
                    if (elem === results[i]) {
                        j = duplicates.push(i);
                    }
                }
                while (j--) {
                    results.splice(duplicates[j], 1);
                }
            }
            return results;
        };
        getText = Sizzle.getText = function (elem) {
            var node, ret = "",
                i = 0,
                nodeType = elem.nodeType;
            if (!nodeType) {
                for (;
                    (node = elem[i]); i++) {
                    ret += getText(node);
                }
            } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
                if (typeof elem.textContent === "string") {
                    return elem.textContent;
                } else {
                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                        ret += getText(elem);
                    }
                }
            } else if (nodeType === 3 || nodeType === 4) {
                return elem.nodeValue;
            }
            return ret;
        };
        Expr = Sizzle.selectors = {
            cacheLength: 50,
            createPseudo: markFunction,
            match: matchExpr,
            attrHandle: {},
            find: {},
            relative: {
                ">": {
                    dir: "parentNode",
                    first: true
                },
                " ": {
                    dir: "parentNode"
                },
                "+": {
                    dir: "previousSibling",
                    first: true
                },
                "~": {
                    dir: "previousSibling"
                }
            },
            preFilter: {
                "ATTR": function (match) {
                    match[1] = match[1].replace(runescape, funescape);
                    match[3] = (match[4] || match[5] || "").replace(runescape, funescape);
                    if (match[2] === "~=") {
                        match[3] = " " + match[3] + " ";
                    }
                    return match.slice(0, 4);
                },
                "CHILD": function (match) {
                    match[1] = match[1].toLowerCase();
                    if (match[1].slice(0, 3) === "nth") {
                        if (!match[3]) {
                            Sizzle.error(match[0]);
                        }
                        match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" ||
                            match[3] === "odd"));
                        match[5] = +((match[7] + match[8]) || match[3] === "odd");
                    } else if (match[3]) {
                        Sizzle.error(match[0]);
                    }
                    return match;
                },
                "PSEUDO": function (match) {
                    var excess, unquoted = !match[5] && match[2];
                    if (matchExpr["CHILD"].test(match[0])) {
                        return null;
                    }
                    if (match[3] && match[4] !== undefined) {
                        match[2] = match[4];
                    } else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) &&
                        (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
                        match[0] = match[0].slice(0, excess);
                        match[2] = unquoted.slice(0, excess);
                    }
                    return match.slice(0, 3);
                }
            },
            filter: {
                "TAG": function (nodeNameSelector) {
                    var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
                    return nodeNameSelector === "*" ? function () {
                        return true;
                    } : function (elem) {
                        return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                    };
                },
                "CLASS": function (className) {
                    var pattern = classCache[className + " "];
                    return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" +
                        whitespace + "|$)")) && classCache(className, function (elem) {
                            return pattern.test(typeof elem.className === "string" && elem.className ||
                                typeof elem.getAttribute !== strundefined && elem.getAttribute(
                                    "class") || "");
                        });
                },
                "ATTR": function (name, operator, check) {
                    return function (elem) {
                        var result = Sizzle.attr(elem, name);
                        if (result == null) {
                            return operator === "!=";
                        }
                        if (!operator) {
                            return true;
                        }
                        result += "";
                        return operator === "=" ? result === check : operator === "!=" ? result !==
                            check : operator === "^=" ? check && result.indexOf(check) === 0 :
                            operator === "*=" ? check && result.indexOf(check) > -1 : operator ===
                                "$=" ? check && result.slice(-check.length) === check : operator ===
                                    "~=" ? (" " + result + " ").indexOf(check) > -1 : operator === "|=" ?
                                result === check || result.slice(0, check.length + 1) === check + "-" :
                                false;
                    };
                },
                "CHILD": function (type, what, argument, first, last) {
                    var simple = type.slice(0, 3) !== "nth",
                        forward = type.slice(-4) !== "last",
                        ofType = what === "of-type";
                    return first === 1 && last === 0 ? function (elem) {
                        return !!elem.parentNode;
                    } : function (elem, context, xml) {
                        var cache, outerCache, node, diff, nodeIndex, start, dir = simple !==
                            forward ? "nextSibling" : "previousSibling",
                            parent = elem.parentNode,
                            name = ofType && elem.nodeName.toLowerCase(),
                            useCache = !xml && !ofType;
                        if (parent) {
                            if (simple) {
                                while (dir) {
                                    node = elem;
                                    while ((node = node[dir])) {
                                        if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType ===
                                            1) {
                                            return false;
                                        }
                                    }
                                    start = dir = type === "only" && !start && "nextSibling";
                                }
                                return true;
                            }
                            start = [forward ? parent.firstChild : parent.lastChild];
                            if (forward && useCache) {
                                outerCache = parent[expando] || (parent[expando] = {});
                                cache = outerCache[type] || [];
                                nodeIndex = cache[0] === dirruns && cache[1];
                                diff = cache[0] === dirruns && cache[2];
                                node = nodeIndex && parent.childNodes[nodeIndex];
                                while ((node = ++nodeIndex && node && node[dir] || (diff =
                                    nodeIndex = 0) || start.pop())) {
                                    if (node.nodeType === 1 && ++diff && node === elem) {
                                        outerCache[type] = [dirruns, nodeIndex, diff];
                                        break;
                                    }
                                }
                            } else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[
                                type]) && cache[0] === dirruns) {
                                diff = cache[1];
                            } else {
                                while ((node = ++nodeIndex && node && node[dir] || (diff =
                                    nodeIndex = 0) || start.pop())) {
                                    if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType ===
                                        1) && ++diff) {
                                        if (useCache) {
                                            (node[expando] || (node[expando] = {}))[type] = [
                                                dirruns, diff];
                                        }
                                        if (node === elem) {
                                            break;
                                        }
                                    }
                                }
                            }
                            diff -= last;
                            return diff === first || (diff % first === 0 && diff / first >= 0);
                        }
                    };
                },
                "PSEUDO": function (pseudo, argument) {
                    var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] ||
                        Sizzle.error("unsupported pseudo: " + pseudo);
                    if (fn[expando]) {
                        return fn(argument);
                    }
                    if (fn.length > 1) {
                        args = [pseudo, pseudo, "", argument];
                        return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(
                            function (seed, matches) {
                                var idx, matched = fn(seed, argument),
                                    i = matched.length;
                                while (i--) {
                                    idx = indexOf.call(seed, matched[i]);
                                    seed[idx] = !(matches[idx] = matched[i]);
                                }
                            }) : function (elem) {
                                return fn(elem, 0, args);
                            };
                    }
                    return fn;
                }
            },
            pseudos: {
                "not": markFunction(function (selector) {
                    var input = [],
                        results = [],
                        matcher = compile(selector.replace(rtrim, "$1"));
                    return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
                        var elem, unmatched = matcher(seed, null, xml, []),
                            i = seed.length;
                        while (i--) {
                            if ((elem = unmatched[i])) {
                                seed[i] = !(matches[i] = elem);
                            }
                        }
                    }) : function (elem, context, xml) {
                        input[0] = elem;
                        matcher(input, null, xml, results);
                        return !results.pop();
                    };
                }),
                "has": markFunction(function (selector) {
                    return function (elem) {
                        return Sizzle(selector, elem).length > 0;
                    };
                }),
                "contains": markFunction(function (text) {
                    return function (elem) {
                        return (elem.textContent || elem.innerText || getText(elem)).indexOf(
                            text) > -1;
                    };
                }),
                "lang": markFunction(function (lang) {
                    if (!ridentifier.test(lang || "")) {
                        Sizzle.error("unsupported lang: " + lang);
                    }
                    lang = lang.replace(runescape, funescape).toLowerCase();
                    return function (elem) {
                        var elemLang;
                        do {
                            if ((elemLang = documentIsHTML ? elem.lang : elem.getAttribute(
                                "xml:lang") || elem.getAttribute("lang"))) {
                                elemLang = elemLang.toLowerCase();
                                return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
                            }
                        } while ((elem = elem.parentNode) && elem.nodeType === 1);
                        return false;
                    };
                }),
                "target": function (elem) {
                    var hash = window.location && window.location.hash;
                    return hash && hash.slice(1) === elem.id;
                },
                "root": function (elem) {
                    return elem === docElem;
                },
                "focus": function (elem) {
                    return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) &&
                        !!(elem.type || elem.href || ~elem.tabIndex);
                },
                "enabled": function (elem) {
                    return elem.disabled === false;
                },
                "disabled": function (elem) {
                    return elem.disabled === true;
                },
                "checked": function (elem) {
                    var nodeName = elem.nodeName.toLowerCase();
                    return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem
                        .selected);
                },
                "selected": function (elem) {
                    if (elem.parentNode) {
                        elem.parentNode.selectedIndex;
                    }
                    return elem.selected === true;
                },
                "empty": function (elem) {
                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                        if (elem.nodeName > "@" || elem.nodeType === 3 || elem.nodeType === 4) {
                            return false;
                        }
                    }
                    return true;
                },
                "parent": function (elem) {
                    return !Expr.pseudos["empty"](elem);
                },
                "header": function (elem) {
                    return rheader.test(elem.nodeName);
                },
                "input": function (elem) {
                    return rinputs.test(elem.nodeName);
                },
                "button": function (elem) {
                    var name = elem.nodeName.toLowerCase();
                    return name === "input" && elem.type === "button" || name === "button";
                },
                "text": function (elem) {
                    var attr;
                    return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && ((attr =
                        elem.getAttribute("type")) == null || attr.toLowerCase() === elem.type);
                },
                "first": createPositionalPseudo(function () {
                    return [0];
                }),
                "last": createPositionalPseudo(function (matchIndexes, length) {
                    return [length - 1];
                }),
                "eq": createPositionalPseudo(function (matchIndexes, length, argument) {
                    return [argument < 0 ? argument + length : argument];
                }),
                "even": createPositionalPseudo(function (matchIndexes, length) {
                    var i = 0;
                    for (; i < length; i += 2) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),
                "odd": createPositionalPseudo(function (matchIndexes, length) {
                    var i = 1;
                    for (; i < length; i += 2) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),
                "lt": createPositionalPseudo(function (matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument;
                    for (; --i >= 0;) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),
                "gt": createPositionalPseudo(function (matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument;
                    for (; ++i < length;) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                })
            }
        };
        Expr.pseudos["nth"] = Expr.pseudos["eq"];
        for (i in {
            radio: true,
            checkbox: true,
            file: true,
            password: true,
            image: true
        }) {
            Expr.pseudos[i] = createInputPseudo(i);
        }
        for (i in {
            submit: true,
            reset: true
        }) {
            Expr.pseudos[i] = createButtonPseudo(i);
        }

        function setFilters() { }
        setFilters.prototype = Expr.filters = Expr.pseudos;
        Expr.setFilters = new setFilters();

        function tokenize(selector, parseOnly) {
            var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + " "];
            if (cached) {
                return parseOnly ? 0 : cached.slice(0);
            }
            soFar = selector;
            groups = [];
            preFilters = Expr.preFilter;
            while (soFar) {
                if (!matched || (match = rcomma.exec(soFar))) {
                    if (match) {
                        soFar = soFar.slice(match[0].length) || soFar;
                    }
                    groups.push(tokens = []);
                }
                matched = false;
                if ((match = rcombinators.exec(soFar))) {
                    matched = match.shift();
                    tokens.push({
                        value: matched,
                        type: match[0].replace(rtrim, " ")
                    });
                    soFar = soFar.slice(matched.length);
                }
                for (type in Expr.filter) {
                    if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type]
                        (match)))) {
                        matched = match.shift();
                        tokens.push({
                            value: matched,
                            type: type,
                            matches: match
                        });
                        soFar = soFar.slice(matched.length);
                    }
                }
                if (!matched) {
                    break;
                }
            }
            return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : tokenCache(selector, groups).slice(
                0);
        }

        function toSelector(tokens) {
            var i = 0,
                len = tokens.length,
                selector = "";
            for (; i < len; i++) {
                selector += tokens[i].value;
            }
            return selector;
        }

        function addCombinator(matcher, combinator, base) {
            var dir = combinator.dir,
                checkNonElements = base && dir === "parentNode",
                doneName = done++;
            return combinator.first ? function (elem, context, xml) {
                while ((elem = elem[dir])) {
                    if (elem.nodeType === 1 || checkNonElements) {
                        return matcher(elem, context, xml);
                    }
                }
            } : function (elem, context, xml) {
                var data, cache, outerCache, dirkey = dirruns + " " + doneName;
                if (xml) {
                    while ((elem = elem[dir])) {
                        if (elem.nodeType === 1 || checkNonElements) {
                            if (matcher(elem, context, xml)) {
                                return true;
                            }
                        }
                    }
                } else {
                    while ((elem = elem[dir])) {
                        if (elem.nodeType === 1 || checkNonElements) {
                            outerCache = elem[expando] || (elem[expando] = {});
                            if ((cache = outerCache[dir]) && cache[0] === dirkey) {
                                if ((data = cache[1]) === true || data === cachedruns) {
                                    return data === true;
                                }
                            } else {
                                cache = outerCache[dir] = [dirkey];
                                cache[1] = matcher(elem, context, xml) || cachedruns;
                                if (cache[1] === true) {
                                    return true;
                                }
                            }
                        }
                    }
                }
            };
        }

        function elementMatcher(matchers) {
            return matchers.length > 1 ? function (elem, context, xml) {
                var i = matchers.length;
                while (i--) {
                    if (!matchers[i](elem, context, xml)) {
                        return false;
                    }
                }
                return true;
            } : matchers[0];
        }

        function condense(unmatched, map, filter, context, xml) {
            var elem, newUnmatched = [],
                i = 0,
                len = unmatched.length,
                mapped = map != null;
            for (; i < len; i++) {
                if ((elem = unmatched[i])) {
                    if (!filter || filter(elem, context, xml)) {
                        newUnmatched.push(elem);
                        if (mapped) {
                            map.push(i);
                        }
                    }
                }
            }
            return newUnmatched;
        }

        function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
            if (postFilter && !postFilter[expando]) {
                postFilter = setMatcher(postFilter);
            }
            if (postFinder && !postFinder[expando]) {
                postFinder = setMatcher(postFinder, postSelector);
            }
            return markFunction(function (seed, results, context, xml) {
                var temp, i, elem, preMap = [],
                    postMap = [],
                    preexisting = results.length,
                    elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] :
                        context, []),
                    matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter,
                        context, xml) : elems,
                    matcherOut = matcher ? postFinder || (seed ? preFilter : preexisting || postFilter) ?
                        [] : results : matcherIn;
                if (matcher) {
                    matcher(matcherIn, matcherOut, context, xml);
                }
                if (postFilter) {
                    temp = condense(matcherOut, postMap);
                    postFilter(temp, [], context, xml);
                    i = temp.length;
                    while (i--) {
                        if ((elem = temp[i])) {
                            matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
                        }
                    }
                }
                if (seed) {
                    if (postFinder || preFilter) {
                        if (postFinder) {
                            temp = [];
                            i = matcherOut.length;
                            while (i--) {
                                if ((elem = matcherOut[i])) {
                                    temp.push((matcherIn[i] = elem));
                                }
                            }
                            postFinder(null, (matcherOut = []), temp, xml);
                        }
                        i = matcherOut.length;
                        while (i--) {
                            if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf.call(seed, elem) :
                                preMap[i]) > -1) {
                                seed[temp] = !(results[temp] = elem);
                            }
                        }
                    }
                } else {
                    matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting,
                        matcherOut.length) : matcherOut);
                    if (postFinder) {
                        postFinder(null, results, matcherOut, xml);
                    } else {
                        push.apply(results, matcherOut);
                    }
                }
            });
        }

        function matcherFromTokens(tokens) {
            var checkContext, matcher, j, len = tokens.length,
                leadingRelative = Expr.relative[tokens[0].type],
                implicitRelative = leadingRelative || Expr.relative[" "],
                i = leadingRelative ? 1 : 0,
                matchContext = addCombinator(function (elem) {
                    return elem === checkContext;
                }, implicitRelative, true),
                matchAnyContext = addCombinator(function (elem) {
                    return indexOf.call(checkContext, elem) > -1;
                }, implicitRelative, true),
                matchers = [function (elem, context, xml) {
                    return (!leadingRelative && (xml || context !== outermostContext)) || ((checkContext =
                        context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem,
                            context, xml));
                }];
            for (; i < len; i++) {
                if ((matcher = Expr.relative[tokens[i].type])) {
                    matchers = [addCombinator(elementMatcher(matchers), matcher)];
                } else {
                    matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);
                    if (matcher[expando]) {
                        j = ++i;
                        for (; j < len; j++) {
                            if (Expr.relative[tokens[j].type]) {
                                break;
                            }
                        }
                        return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(tokens.slice(0,
                            i - 1).concat({
                                value: tokens[i - 2].type === " " ? "*" : ""
                            })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)),
                            j < len && matcherFromTokens((tokens = tokens.slice(j))), j < len && toSelector(
                                tokens));
                    }
                    matchers.push(matcher);
                }
            }
            return elementMatcher(matchers);
        }

        function matcherFromGroupMatchers(elementMatchers, setMatchers) {
            var matcherCachedRuns = 0,
                bySet = setMatchers.length > 0,
                byElement = elementMatchers.length > 0,
                superMatcher = function (seed, context, xml, results, expandContext) {
                    var elem, j, matcher, setMatched = [],
                        matchedCount = 0,
                        i = "0",
                        unmatched = seed && [],
                        outermost = expandContext != null,
                        contextBackup = outermostContext,
                        elems = seed || byElement && Expr.find["TAG"]("*", expandContext && context.parentNode ||
                            context),
                        dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1);
                    if (outermost) {
                        outermostContext = context !== document && context;
                        cachedruns = matcherCachedRuns;
                    }
                    for (;
                        (elem = elems[i]) != null; i++) {
                        if (byElement && elem) {
                            j = 0;
                            while ((matcher = elementMatchers[j++])) {
                                if (matcher(elem, context, xml)) {
                                    results.push(elem);
                                    break;
                                }
                            }
                            if (outermost) {
                                dirruns = dirrunsUnique;
                                cachedruns = ++matcherCachedRuns;
                            }
                        }
                        if (bySet) {
                            if ((elem = !matcher && elem)) {
                                matchedCount--;
                            }
                            if (seed) {
                                unmatched.push(elem);
                            }
                        }
                    }
                    matchedCount += i;
                    if (bySet && i !== matchedCount) {
                        j = 0;
                        while ((matcher = setMatchers[j++])) {
                            matcher(unmatched, setMatched, context, xml);
                        }
                        if (seed) {
                            if (matchedCount > 0) {
                                while (i--) {
                                    if (!(unmatched[i] || setMatched[i])) {
                                        setMatched[i] = pop.call(results);
                                    }
                                }
                            }
                            setMatched = condense(setMatched);
                        }
                        push.apply(results, setMatched);
                        if (outermost && !seed && setMatched.length > 0 && (matchedCount + setMatchers.length) >
                            1) {
                            Sizzle.uniqueSort(results);
                        }
                    }
                    if (outermost) {
                        dirruns = dirrunsUnique;
                        outermostContext = contextBackup;
                    }
                    return unmatched;
                };
            return bySet ? markFunction(superMatcher) : superMatcher;
        }
        compile = Sizzle.compile = function (selector, group) {
            var i, setMatchers = [],
                elementMatchers = [],
                cached = compilerCache[selector + " "];
            if (!cached) {
                if (!group) {
                    group = tokenize(selector);
                }
                i = group.length;
                while (i--) {
                    cached = matcherFromTokens(group[i]);
                    if (cached[expando]) {
                        setMatchers.push(cached);
                    } else {
                        elementMatchers.push(cached);
                    }
                }
                cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
            }
            return cached;
        };

        function multipleContexts(selector, contexts, results) {
            var i = 0,
                len = contexts.length;
            for (; i < len; i++) {
                Sizzle(selector, contexts[i], results);
            }
            return results;
        }

        function select(selector, context, results, seed) {
            var i, tokens, token, type, find, match = tokenize(selector);
            if (!seed) {
                if (match.length === 1) {
                    tokens = match[0] = match[0].slice(0);
                    if (tokens.length > 2 && (token = tokens[0]).type === "ID" && support.getById && context.nodeType ===
                        9 && documentIsHTML && Expr.relative[tokens[1].type]) {
                        context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) ||
                            [])[0];
                        if (!context) {
                            return results;
                        }
                        selector = selector.slice(tokens.shift().value.length);
                    }
                    i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
                    while (i--) {
                        token = tokens[i];
                        if (Expr.relative[(type = token.type)]) {
                            break;
                        }
                        if ((find = Expr.find[type])) {
                            if ((seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(
                                tokens[0].type) && context.parentNode || context))) {
                                tokens.splice(i, 1);
                                selector = seed.length && toSelector(tokens);
                                if (!selector) {
                                    push.apply(results, seed);
                                    return results;
                                }
                                break;
                            }
                        }
                    }
                }
            }
            compile(selector, match)(seed, context, !documentIsHTML, results, rsibling.test(selector));
            return results;
        }
        support.sortStable = expando.split("").sort(sortOrder).join("") === expando;
        support.detectDuplicates = hasDuplicate;
        setDocument();
        support.sortDetached = assert(function (div1) {
            return div1.compareDocumentPosition(document.createElement("div")) & 1;
        });
        if (!assert(function (div) {
            div.innerHTML = "<a href='#'></a>";
            return div.firstChild.getAttribute("href") === "#";
        })) {
            addHandle("type|href|height|width", function (elem, name, isXML) {
                if (!isXML) {
                    return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
                }
            });
        }
        if (!support.attributes || !assert(function (div) {
            div.innerHTML = "<input/>";
            div.firstChild.setAttribute("value", "");
            return div.firstChild.getAttribute("value") === "";
        })) {
            addHandle("value", function (elem, name, isXML) {
                if (!isXML && elem.nodeName.toLowerCase() === "input") {
                    return elem.defaultValue;
                }
            });
        }
        if (!assert(function (div) {
            return div.getAttribute("disabled") == null;
        })) {
            addHandle(booleans, function (elem, name, isXML) {
                var val;
                if (!isXML) {
                    return (val = elem.getAttributeNode(name)) && val.specified ? val.value : elem[name] ===
                        true ? name.toLowerCase() : null;
                }
            });
        }
        jQuery.find = Sizzle;
        jQuery.expr = Sizzle.selectors;
        jQuery.expr[":"] = jQuery.expr.pseudos;
        jQuery.unique = Sizzle.uniqueSort;
        jQuery.text = Sizzle.getText;
        jQuery.isXMLDoc = Sizzle.isXML;
        jQuery.contains = Sizzle.contains;
    })(window);
    // 回调对象： 对函数的统一管理
    var optionsCache = {};

    function createOptions(options) {
        var object = optionsCache[options] = {};
        // 通过空格进行分割，然后存到 object 中
        // 得到类似如：{ once: true }
        jQuery.each(options.match(core_rnotwhite) || [], function (_, flag) {
            object[flag] = true;
        });
        return object;
    }
    jQuery.Callbacks = function (options) {
        /**
         * 参数配置说明：
         * once: 是否只触发函数一次 => 让其中调用的 for 循环执行一次即可
         * memory: 不管先 add 还是在 fire(触发函数) 之后 add 到 list 的函数，都触发 => 让 add 之后都触发一回 fire
         * unique: 是否去重，不会触发重复函数 => 在 add 当中是否重复添加
         * stopOnFalse: 在函数们 return false 之后就不触发后面的函数了，即不冒泡 => 在 fire 里面 for 循环设置
         */
        options = typeof options === "string" ? (optionsCache[options] || createOptions(options)) : jQuery.extend({},
            options); // 处理传参，转为一个 object
        var
            memory, fired, firing, firingStart, firingLength, firingIndex, list = [],
            stack = !options.once && [], // 可能值：false | []; 判断是否一次性触发
            fire = function (data) {
                memory = options.memory && data; // 是否利用缓存
                fired = true; // 执行一次之后, fired 就是 true 了
                firingIndex = firingStart || 0; // 索引
                firingStart = 0; // 起始值
                firingLength = list.length; // 长度
                firing = true; // 正在触发当中
                for (; list && firingIndex < firingLength; firingIndex++) {
                    // 利用 apply 进行触发，data[1] 是每个具体函数的传参
                    // 如果 回调函数 return false 则不向后执行，直接结束
                    if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {
                        memory = false;
                        break;
                    }
                }
                firing = false; // 触发结束
                if (list) {
                    if (stack) { // 执行堆里面的回调 
                        if (stack.length) {
                            fire(stack.shift());
                        }
                    } else if (memory) { // 当 once 且 memory 时
                        list = []; // 将 list 清空
                    } else {
                        self.disable(); // 阻止后续的任何一次 fire 的操作
                    }
                }
            },
            self = {
                add: function () {
                    if (list) {
                        var start = list.length;
                        (function add(args) {
                            jQuery.each(args, function (_, arg) {
                                var type = jQuery.type(arg);
                                if (type === "function") { // 是函数类型
                                    if (!options.unique || !self.has(arg)) { // 是否去重
                                        list.push(arg);
                                    }
                                } else if (arg && arg.length && type !== "string") { // 当 add 一个数组时
                                    add(arg);
                                }
                            });
                        })(arguments); // 向 list 里面 push 元素
                        if (firing) { // 是否正在执行
                            firingLength = list.length;
                        } else if (memory) { // 是否直接触发，在 fire 触发之后 add 的函数
                            firingStart = start;
                            fire(memory);
                        }
                    }
                    return this;
                },
                remove: function () { // 删除，可以传数组和元素
                    if (list) {
                        jQuery.each(arguments, function (_, arg) {
                            var index;
                            while ((index = jQuery.inArray(arg, list, index)) > -1) {
                                list.splice(index, 1);
                                if (firing) {
                                    if (index <= firingLength) {
                                        firingLength--;
                                    }
                                    if (index <= firingIndex) {
                                        firingIndex--;
                                    }
                                }
                            }
                        });
                    }
                    return this;
                },
                has: function (fn) { // fn 函数是否在 list 中
                    return fn ? jQuery.inArray(fn, list) > -1 : !!(list && list.length);
                },
                empty: function () { // 清空
                    list = [];
                    firingLength = 0;
                    return this;
                },
                disable: function () { // 全部禁止
                    list = stack = memory = undefined;
                    return this;
                },
                disabled: function () { // 是否是禁止
                    return !list;
                },
                lock: function () { // 锁住 fire
                    stack = undefined;
                    if (!memory) {
                        self.disable();
                    }
                    return this;
                },
                locked: function () { // 是否是锁住了
                    return !stack;
                },
                fireWith: function (context, args) {
                    // 判断 List 是否存在，fired 第一次调用是undefined
                    if (list && (!fired || stack)) {
                        args = args || [];
                        // 参数组装，作用域 + args (在 fire 调用时候会传参)
                        args = [context, args.slice ? args.slice() : args];
                        if (firing) { // 有回调正在执行，则 push 到堆中
                            stack.push(args);
                        } else {
                            fire(args); // 调用 函数 fire
                        }
                    }
                    return this;
                },
                fire: function () { // 对象方法
                    self.fireWith(this, arguments);
                    return this;
                },
                fired: function () { // 是否触发过
                    return !!fired;
                }
            };
        return self;
    };
    jQuery.extend({
        // 延迟对象，对异步的统一管理
        Deferred: function (func) {
            // action, add listener, listener list, final state
            // 映射关系
            var tuples = [
                ["resolve", "done", jQuery.Callbacks("once memory"), "resolved"], // 触发一次，一次触发之后fire的记忆功能（状态 resolved 之后，添加 done 会直接触发）
                ["reject", "fail", jQuery.Callbacks("once memory"), "rejected"], // 触发一次，记忆功能
                ["notify", "progress", jQuery.Callbacks("memory")] // 记忆功能
            ], // 六个方法，添加到 callbacks 的 list 中
                state = "pending", // 状态
                // promise 有 state \ always \ then \ promise \ pipe \ done \ fail \ progress 这 8 个方法
                promise = {
                    state: function () {
                        return state;
                    },
                    always: function () {
                        deferred.done(arguments).fail(arguments);
                        return this;
                    },
                    then: function () {
                        var fns = arguments;
                        // return 是 针对 pipe 用的，pipe（管道）可以将 延迟对象 变得更长一点
                        return jQuery.Deferred(function (newDefer) {
                            jQuery.each(tuples, function (i, tuple) {
                                var action = tuple[0],
                                    fn = jQuery.isFunction(fns[i]) && fns[i];
                                deferred[tuple[1]](function () {
                                    var returned = fn && fn.apply(this,
                                        arguments); // 判断函数有没有，状态传参
                                    if (returned && jQuery.isFunction(
                                        returned.promise)) {
                                        returned.promise().done(newDefer.resolve)
                                            .fail(newDefer.reject).progress(
                                                newDefer.notify); // 新创建的 promise()
                                    } else {
                                        newDefer[action + "With"](this ===
                                            promise ? newDefer.promise() :
                                            this, fn ? [returned] :
                                            arguments);
                                    }
                                });
                            });
                            fns = null;
                        }).promise();
                    },
                    promise: function (obj) {
                        return obj != null ? jQuery.extend(obj, promise) : promise; // promise 与 deferred， 扩展 deferred
                    }
                },
                deferred = {};
            promise.pipe = promise.then; // 代码一样，功能不同；也是为了 Jquery 版本迭代兼容
            // add list-specific methods
            // 建立映射关系
            jQuery.each(tuples, function (i, tuple) {
                // 其中 promise 和 deferred 都是延迟对象
                var list = tuple[2], // 回调对象
                    stateString = tuple[3]; // 状态
                // promise [ done | fail | progress ] = list.add
                promise[tuple[1]] = list.add; // 将 回调的 add 方法赋给 promise 的 相关属性
                // handle state
                if (stateString) { // 完成和未完成状态才能走 if
                    list.add(function () {
                        // state = [ resolved | rejected ]
                        state = stateString;
                        // [ reject_list | resolve_list ].disable; progress_list.lock
                        // 禁止回调的功能，锁住回调对象
                    }, tuples[i ^ 1][2].disable, tuples[2][2].lock);
                }
                // deferred[ resolve | reject | notify ]
                deferred[tuple[0]] = function () {
                    deferred[tuple[0] + "With"](this === deferred ? promise : this,
                        arguments);
                    return this;
                };
                deferred[tuple[0] + "With"] = list.fireWith; // 都是调的 fireWith 【带传参】
            });
            // 将 promise 下面的方法继承到 deferred
            // deferred 有 resolve \ reject \ notify + 8 共 11 种方法
            promise.promise(deferred);
            if (func) {
                func.call(deferred, deferred);
            }
            return deferred;
        },
        when: function (subordinate) {
            var i = 0, // 计数
                resolveValues = core_slice.call(arguments), // 转成数组
                length = resolveValues.length,
                // the count of uncompleted subordinates, 未完成的数量
                remaining = length !== 1 || (subordinate && jQuery.isFunction(subordinate.promise)) ?
                    length : 0,
                deferred = remaining === 1 ? subordinate : jQuery.Deferred(), // 整体的延迟对象
                updateFunc = function (i, contexts, values) {
                    return function (value) {
                        contexts[i] = this;
                        values[i] = arguments.length > 1 ? core_slice.call(arguments) : value;
                        if (values === progressValues) { // 进行中
                            deferred.notifyWith(contexts, values);
                        } else if (!(--remaining)) { // 减计数器
                            deferred.resolveWith(contexts, values); // 执行整体的 done
                        }
                    };
                },
                progressValues, progressContexts, resolveContexts;
            // 当 延迟队列大于1 时 进行处理
            // add listeners to Deferred subordinates; treat others as resolved
            if (length > 1) {
                progressValues = new Array(length); // 进行中的值
                progressContexts = new Array(length); // 进行中的作用域
                resolveContexts = new Array(length); // 完成的作用域
                for (; i < length; i++) {
                    if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) { // 判断是否是延迟对象
                        resolveValues[i].promise() // 得到延迟对象 的 promise()
                            .done(updateFunc(i, resolveContexts, resolveValues))
                            .fail(deferred.reject) // 一个失败就触发 整体的 fail
                            .progress(updateFunc(i, progressContexts, progressValues));
                    } else { // 不是延迟对象
                        --remaining;
                    }
                }
            }
            // if we are not waiting on anything, resolve the master
            if (!remaining) { // remaining = 0 时
                deferred.resolveWith(resolveContexts, resolveValues); // 触发成功回调
            }
            return deferred.promise();
        }
    });
    // 功能检测，检测兼容性问题：判断有没有什么功能
    jQuery.support = (function (support) {
        var input = document.createElement("input"),
            fragment = document.createDocumentFragment(),
            div = document.createElement("div"),
            select = document.createElement("select"),
            opt = select.appendChild(document.createElement("option"));
        if (!input.type) { // 默认是 'text'
            return support;
        }
        input.type = "checkbox";
        support.checkOn = input.value !== "";  // "" on old WebKit; "on" elsewhere
        support.optSelected = opt.selected; // 支持 ie9 ie10
        // 定义初始值
        support.reliableMarginRight = true;
        support.boxSizingReliable = true;
        support.pixelPosition = false;
        // 支持 ie9 ie10
        input.checked = true;
        support.noCloneChecked = input.cloneNode(true).checked;
        // 
        select.disabled = true;
        support.optDisabled = !opt.disabled;
        // 支持 ie9 ie10
        input = document.createElement("input");
        input.value = "t"; // 先设置 value 再设置 type
        input.type = "radio";
        support.radioValue = input.value === "t";

        input.setAttribute("checked", "t");
        input.setAttribute("name", "t");

        fragment.appendChild(input);
        support.checkClone = fragment.cloneNode(true).cloneNode(true).lastChild.checked;
        support.focusinBubbles = "onfocusin" in window;
        div.style.backgroundClip = "content-box";
        div.cloneNode(true).style.backgroundClip = "";
        support.clearCloneStyle = div.style.backgroundClip === "content-box";
        jQuery(function () { // dom 加载完进行检测
            var container, marginDiv, divReset =
                "padding:0;margin:0;border:0;display:block;-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box",
                body = document.getElementsByTagName("body")[0];
            if (!body) {
                return;
            }
            container = document.createElement("div");
            container.style.cssText =
                "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px";
            body.appendChild(container).appendChild(div);
            div.innerHTML = "";
            div.style.cssText =
                "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%";
            jQuery.swap(body, body.style.zoom != null ? {
                zoom: 1
            } : {}, function () {
                support.boxSizing = div.offsetWidth === 4;
            });
            if (window.getComputedStyle) {
                support.pixelPosition = (window.getComputedStyle(div, null) || {}).top !== "1%";
                support.boxSizingReliable = (window.getComputedStyle(div, null) || {
                    width: "4px"
                }).width === "4px";
                marginDiv = div.appendChild(document.createElement("div"));
                marginDiv.style.cssText = div.style.cssText = divReset;
                marginDiv.style.marginRight = marginDiv.style.width = "0";
                div.style.width = "1px";
                support.reliableMarginRight = !parseFloat((window.getComputedStyle(marginDiv, null) ||
                    {}).marginRight);
            }
            body.removeChild(container);
        });
        return support;
    })({});
    var data_user, data_priv, rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/, // [0次或多次]
        rmultiDash = /([A-Z])/g;

    function Data() {
        // cache[0] 获取为 {} ，防止 cache[0] 被修改
        // cache[0] 是公用的，很多元素使用的是它
        Object.defineProperty(this.cache = {}, 0, {
            get: function () {
                return {};
            }
        });
        this.expando = jQuery.expando + Math.random();  // 自定义属性 xxx = "1" 中的 属性名 xxx => 唯一标识
    }
    Data.uid = 1;
    Data.accepts = function (owner) {
        return owner.nodeType ? owner.nodeType === 1 || owner.nodeType === 9 : true; // 不是元素和文档节点
    };
    Data.prototype = {
        key: function (owner) {
            if (!Data.accepts(owner)) {
                return 0;
            }
            var descriptor = {},
                unlock = owner[this.expando]; // 有没有对应的 index 值
            if (!unlock) { // 分配 dom 上的自定义属性， 不存在 unlock 时
                unlock = Data.uid++;
                try {
                    // 只能获取，不能改和枚举
                    descriptor[this.expando] = {
                        value: unlock
                    };
                    Object.defineProperties(owner, descriptor);
                } catch (e) {
                    descriptor[this.expando] = unlock; // support for Android < 4
                    jQuery.extend(owner, descriptor);
                }
            }
            if (!this.cache[unlock]) { // 设置 cache, 第一次设置，不存在时
                this.cache[unlock] = {};
            }
            return unlock;
        },
        set: function (owner, data, value) {
            var prop, unlock = this.key(owner),
                cache = this.cache[unlock];
            if (typeof data === "string") {
                cache[data] = value;
            } else { // data 也支持 obj(key-value) 格式
                if (jQuery.isEmptyObject(cache)) {
                    jQuery.extend(this.cache[unlock], data); // 也是 for - in 循环
                } else {
                    for (prop in data) {
                        cache[prop] = data[prop];
                    }
                }
            }
            return cache;
        },
        get: function (owner, key) {
            var cache = this.cache[this.key(owner)];
            return key === undefined ? cache : cache[key];
        },
        access: function (owner, key, value) {
            var stored;
            if (key === undefined || ((key && typeof key === "string") && value === undefined)) {
                stored = this.get(owner, key);
                return stored !== undefined ? stored : this.get(owner, jQuery.camelCase(key));
            }
            this.set(owner, key, value);
            return value !== undefined ? value : key;
        },
        remove: function (owner, key) {
            var i, name, camel, unlock = this.key(owner),
                cache = this.cache[unlock];
            if (key === undefined) { // key 不存在的时候，将所有的数据缓存都清空
                this.cache[unlock] = {};
            } else { // 指定 key
                if (jQuery.isArray(key)) { // 数组形式，例如 ['age', 'job']
                    name = key.concat(key.map(jQuery.camelCase));
                } else {
                    camel = jQuery.camelCase(key); // 转驼峰
                    if (key in cache) {
                        name = [key, camel];
                    } else {
                        name = camel;
                        name = name in cache ? [name] : (name.match(core_rnotwhite) || []); // 去空格
                    }
                }
                i = name.length;
                while (i--) {
                    delete cache[name[i]];
                }
            }
        },
        hasData: function (owner) {
            return !jQuery.isEmptyObject(this.cache[owner[this.expando]] || {});
        },
        discard: function (owner) { // 删除整体属性
            if (owner[this.expando]) {
                delete this.cache[owner[this.expando]];
            }
        }
    };
    data_user = new Data();
    data_priv = new Data(); // 私有
    // 工具方法
    jQuery.extend({
        acceptData: Data.accepts,
        hasData: function (elem) {
            return data_user.hasData(elem) || data_priv.hasData(elem);
        },
        data: function (elem, name, data) {
            return data_user.access(elem, name, data);
        },
        removeData: function (elem, name) {
            data_user.remove(elem, name);
        },
        // 带 _ 表示私有
        _data: function (elem, name, data) {
            return data_priv.access(elem, name, data);
        },
        _removeData: function (elem, name) {
            data_priv.remove(elem, name);
        }
    });
    // 实例方法
    jQuery.fn.extend({
        data: function (key, value) {
            var attrs, name, elem = this[0],
                i = 0,
                data = null;
            // 获取所有的 value 值
            if (key === undefined) {
                if (this.length) {
                    data = data_user.get(elem);
                    // hasDataAttrs 标识是否走过，是放到私有的当中
                    if (elem.nodeType === 1 && !data_priv.get(elem, "hasDataAttrs")) {
                        attrs = elem.attributes;
                        for (; i < attrs.length; i++) {
                            name = attrs[i].name;
                            if (name.indexOf("data-") === 0) { // 包含 data-
                                name = jQuery.camelCase(name.slice(5)); // 转驼峰
                                dataAttr(elem, name, data[name]); // 设置到缓存上
                            }
                        }
                        data_priv.set(elem, "hasDataAttrs", true);
                    }
                }
                return data;
            }
            // 设置多个属性值
            if (typeof key === "object") {
                return this.each(function () {
                    data_user.set(this, key);
                });
            }
            // access 对多功能值进行设置和获取，回调函数的操作
            return jQuery.access(this, function (value) {
                var data, camelKey = jQuery.camelCase(key);
                if (elem && value === undefined) { // 三种情况获取值
                    data = data_user.get(elem, key);
                    if (data !== undefined) { // 最直接的情况，name-age
                        return data;
                    }
                    data = data_user.get(elem, camelKey); // 转驼峰之后找值, nameAge
                    if (data !== undefined) {
                        return data;
                    }
                    data = dataAttr(elem, camelKey, undefined); // 去找 html5 自定义的 data-* 的属性值 : data-name-age
                    if (data !== undefined) {
                        return data;
                    }
                    return;
                }
                // set the data
                this.each(function () {
                    /**
                     * $('#id').data('nameAge', 'hi')
                     * $('#id').data('name-age', 'hello')
                     * this.cache = {1 : {
                     *      'nameAge': 'hello', 'name-age': 'hello'
                     * }}*/
                    var data = data_user.get(this, camelKey);
                    data_user.set(this, camelKey, value);
                    if (key.indexOf("-") !== -1 && data !== undefined) {
                        data_user.set(this, key, value);
                    }
                });
            }, null, value, arguments.length > 1, null, true); // arguments.length > 1 控制获取还是设置
        },
        removeData: function (key) {
            return this.each(function () {
                data_user.remove(this, key);
            });
        }
    });
    // 把属性放到 cache 当中
    function dataAttr(elem, key, data) {
        var name;
        // data-* 是否存在，且 elem 是一个元素
        if (data === undefined && elem.nodeType === 1) {
            name = "data-" + key.replace(rmultiDash, "-$1").toLowerCase();
            data = elem.getAttribute(name);
            if (typeof data === "string") {
                try {
                    data = data === "true" ? true : data === "false" ? false : data === "null" ? null : +data + "" === // 数字类型
                        data ? +data : rbrace.test(data) ? JSON.parse(data) : data;
                } catch (e) { }
                data_user.set(elem, key, data);
            } else {
                data = undefined;
            }
        }
        return data;
    }
    // 工具方法
    jQuery.extend({
        /**
         * 入队操作
         * @param {对象} elem 
         * @param {队列名} type 
         * @param {数据} data 
         * @returns 
         */
        queue: function (elem, type, data) {
            var queue;
            if (elem) {
                type = (type || "fx") + "queue"; // 默认名
                queue = data_priv.get(elem, type);
                if (data) {
                    if (!queue || jQuery.isArray(data)) { // 当不存在时 或者 data 是一个数组的时候
                        queue = data_priv.access(elem, type, jQuery.makeArray(data)); // 创建一个数据缓存
                    } else {
                        queue.push(data); // 累加
                    }
                }
                return queue || [];
            }
        },
        // 出队
        dequeue: function (elem, type) {
            type = type || "fx";
            var queue = jQuery.queue(elem, type),
                startLength = queue.length,
                fn = queue.shift(), // 第一个
                hooks = jQuery._queueHooks(elem, type),
                next = function () {
                    jQuery.dequeue(elem, type);
                };
            if (fn === "inprogress") {
                fn = queue.shift();
                startLength--;
            }
            if (fn) {
                if (type === "fx") {
                    queue.unshift("inprogress"); // 头添加
                }
                delete hooks.stop;
                fn.call(elem, next, hooks);
            }
            if (!startLength && hooks) {
                hooks.empty.fire(); // 触发 remove 操作，将缓存中的队列名删除
            }
        },
        _queueHooks: function (elem, type) {
            var key = type + "queueHooks";
            return data_priv.get(elem, key) || data_priv.access(elem, key, {
                empty: jQuery.Callbacks("once memory").add(function () {
                    data_priv.remove(elem, [type + "queue", key]); // 清理缓存
                })
            });
        }
    });
    // 实例方法
    jQuery.fn.extend({
        queue: function (type, data) {
            var setter = 2;
            if (typeof type !== "string") {
                data = type;
                type = "fx";
                setter--;
            }
            if (arguments.length < setter) {
                return jQuery.queue(this[0], type); // 查看
            }
            return data === undefined ? this : this.each(function () {
                var queue = jQuery.queue(this, type, data); // 入队
                jQuery._queueHooks(this, type); // 设置 hooks
                if (type === "fx" && queue[0] !== "inprogress") { // 入队就出队， 针对第一次
                    jQuery.dequeue(this, type);
                }
            });
        },
        dequeue: function (type) {
            return this.each(function () {
                jQuery.dequeue(this, type);
            });
        },
        // 让队列延迟执行
        delay: function (time, type) {
            time = jQuery.fx ? jQuery.fx.speeds[time] || time : time; // 延迟时间
            type = type || "fx";
            return this.queue(type, function (next, hooks) {
                var timeout = setTimeout(next, time);
                hooks.stop = function () {
                    clearTimeout(timeout);
                };
            });
        },
        // 清空队列
        clearQueue: function (type) {
            return this.queue(type || "fx", []);
        },
        promise: function (type, obj) {
            var tmp, count = 1, // 计数，多少需要执行的队列
                defer = jQuery.Deferred(),
                elements = this,
                i = this.length,
                resolve = function () {
                    if (!(--count)) {
                        defer.resolveWith(elements, [elements]);
                    }
                };
            if (typeof type !== "string") {
                obj = type;
                type = undefined;
            }
            type = type || "fx";
            while (i--) {
                tmp = data_priv.get(elements[i], type + "queueHooks");
                if (tmp && tmp.empty) { // 队列存在
                    count++;
                    tmp.empty.add(resolve);
                }
            }
            resolve();
            return defer.promise(obj);
        }
    });
    var nodeHook, boolHook, rclass = /[\t\r\n\f]/g, // 制表符，回车，换行，换页
        rreturn = /\r/g,
        rfocusable = /^(?:input|select|textarea|button)$/i;
    jQuery.fn.extend({
        attr: function (name, value) {
            // access 是对属性和功能多功能的操作
            return jQuery.access(this, jQuery.attr, name, value, arguments.length > 1);
        },
        removeAttr: function (name) {
            return this.each(function () {
                jQuery.removeAttr(this, name);
            });
        },
        prop: function (name, value) {
            return jQuery.access(this, jQuery.prop, name, value, arguments.length > 1);
        },
        removeProp: function (name) {
            return this.each(function () {
                delete this[jQuery.propFix[name] || name]; // 删除
            });
        },
        addClass: function (value) {
            var classes, elem, cur, clazz, j, i = 0,
                len = this.length,
                proceed = typeof value === "string" && value;
            if (jQuery.isFunction(value)) { // 是否是函数，给每一个元素进行回调函数的执行
                return this.each(function (j) {
                    jQuery(this).addClass(value.call(this, j, this.className));
                });
            }
            if (proceed) {
                // 字符串类型
                classes = (value || "").match(core_rnotwhite) || []; // 划分数组
                for (; i < len; i++) {
                    elem = this[i];
                    cur = elem.nodeType === 1 && (elem.className ? (" " + elem.className + " ").replace(
                        rclass, " ") : " ");  // 对特殊的空格进行替换
                    if (cur) {
                        j = 0;
                        while ((clazz = classes[j++])) {
                            if (cur.indexOf(" " + clazz + " ") < 0) {
                                cur += clazz + " ";
                            }
                        }
                        elem.className = jQuery.trim(cur); // 设置 class
                    }
                }
            }
            return this; // 支持链式操作
        },
        removeClass: function (value) {
            var classes, elem, cur, clazz, j, i = 0,
                len = this.length,
                proceed = arguments.length === 0 || typeof value === "string" && value;
            if (jQuery.isFunction(value)) { // 回调函数
                return this.each(function (j) {
                    jQuery(this).removeClass(value.call(this, j, this.className));
                });
            }
            if (proceed) {
                classes = (value || "").match(core_rnotwhite) || [];
                for (; i < len; i++) {
                    elem = this[i];
                    cur = elem.nodeType === 1 && (elem.className ? (" " + elem.className + " ").replace(
                        rclass, " ") : "");
                    if (cur) {
                        j = 0;
                        while ((clazz = classes[j++])) {
                            while (cur.indexOf(" " + clazz + " ") >= 0) {
                                cur = cur.replace(" " + clazz + " ", " ");
                            }
                        }
                        elem.className = value ? jQuery.trim(cur) : "";
                    }
                }
            }
            return this;
        },
        toggleClass: function (value, stateVal) { // 切换
            var type = typeof value;
            // stateVal ： true 为添加， false 为删除
            if (typeof stateVal === "boolean" && type === "string") {
                return stateVal ? this.addClass(value) : this.removeClass(value);
            }
            if (jQuery.isFunction(value)) {
                return this.each(function (i) {
                    jQuery(this).toggleClass(value.call(this, i, this.className, stateVal),
                        stateVal); // 回调
                });
            }
            return this.each(function () {
                if (type === "string") {
                    var className, i = 0,
                        self = jQuery(this),
                        classNames = value.match(core_rnotwhite) || [];
                    while ((className = classNames[i++])) {
                        if (self.hasClass(className)) {
                            self.removeClass(className);
                        } else {
                            self.addClass(className);
                        }
                    }
                } else if (type === core_strundefined || type === "boolean") {
                    // value 是布尔值时，可以添加或者删除
                    if (this.className) {
                        data_priv.set(this, "__className__", this.className);
                    }
                    this.className = this.className || value === false ? "" : data_priv.get(
                        this, "__className__") || "";
                }
            });
        },
        hasClass: function (selector) {
            var className = " " + selector + " ",
                i = 0,
                l = this.length;
            for (; i < l; i++) {
                if (this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf(
                    className) >= 0) {
                    return true;
                }
            }
            return false;
        },
        val: function (value) {
            var hooks, ret, isFunction, elem = this[0];
            if (!arguments.length) { // 针对获取的操作
                if (elem) {  // valHooks 针对 option select radio checkbox 做兼容性处理
                    hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
                    if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
                        return ret;
                    }
                    ret = elem.value;
                    return typeof ret === "string" ? ret.replace(rreturn, "") : ret == null ? "" : ret;
                }
                return;
            }
            isFunction = jQuery.isFunction(value);  // 针对设置的操作
            return this.each(function (i) {
                var val;
                if (this.nodeType !== 1) {
                    return;
                }
                if (isFunction) {
                    val = value.call(this, i, jQuery(this).val());
                } else {
                    val = value;
                }
                if (val == null) {
                    val = "";
                } else if (typeof val === "number") {
                    val += "";
                } else if (jQuery.isArray(val)) {
                    val = jQuery.map(val, function (value) {
                        return value == null ? "" : value + "";
                    });
                }
                hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
                if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
                    this.value = val;
                }
            });
        }
    });
    jQuery.extend({
        valHooks: { // 兼容性处理
            option: {
                get: function (elem) { // elem.value 或者 elem.text
                    var val = elem.attributes.value;
                    return !val || val.specified ? elem.value : elem.text;
                }
            },
            select: {
                get: function (elem) {
                    var value, option, options = elem.options,
                        index = elem.selectedIndex,
                        one = elem.type === "select-one" || index < 0,  // 是否是单选， 'select-multiple'
                        values = one ? null : [],
                        max = one ? index + 1 : options.length,
                        i = index < 0 ? max : one ? index : 0;
                    for (; i < max; i++) {
                        option = options[i];
                        if ((option.selected || i === index) && (jQuery.support.optDisabled ? !option.disabled :  // 过滤掉禁用的
                            option.getAttribute("disabled") === null) && (!option.parentNode.disabled ||
                                !jQuery.nodeName(option.parentNode, "optgroup"))) {
                            value = jQuery(option).val(); // 获取到值
                            if (one) {
                                return value;  // 单选
                            }
                            values.push(value);
                        }
                    }
                    return values; // 多选
                },
                set: function (elem, value) {
                    var optionSet, option, options = elem.options,
                        values = jQuery.makeArray(value),
                        i = options.length;
                    while (i--) {
                        option = options[i];
                        if ((option.selected = jQuery.inArray(jQuery(option).val(), values) >= 0)) {
                            optionSet = true;  // 赋值
                        }
                    }
                    if (!optionSet) {
                        elem.selectedIndex = -1;
                    }
                    return values;
                }
            }
        },
        attr: function (elem, name, value) {
            var hooks, ret, nType = elem.nodeType;
            // 节点不存在 或者 是个 文本，注释，或者属性节点时候
            if (!elem || nType === 3 || nType === 8 || nType === 2) {
                return;
            }
            // 如果 attr 是 undefined 的时候，走 prop 函数，例如：$(document).attr('title')
            if (typeof elem.getAttribute === core_strundefined) {
                return jQuery.prop(elem, name, value);
            }
            // 不是元素节点的时候 或者 不是 xml  (是 Sizzle 提供的判断是否是 xml 的函数)
            // all attributes are lowercase
            // grab necessary hook if one is defined
            if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                name = name.toLowerCase();
                hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook :
                    nodeHook);  // attrHooks 兼容性问题， 
                // jQuery.expr.match.bool 匹配是否含有一些 特定的 属性名，对一些写法进行兼容， 例如 $('input').attr('checked', true)
            }
            if (value !== undefined) {
                // 设置 属性的时候
                if (value === null) { // 值为 null 时，删除该属性
                    jQuery.removeAttr(elem, name);
                } else if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !==
                    undefined) {
                    return ret;
                } else {
                    elem.setAttribute(name, value + "");
                    return value;
                }
            } else if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
                // 获取 属性
                return ret;
            } else {
                ret = jQuery.find.attr(elem, name); //jQuery.find = Sizzle; sizzle 中获取 getAttribute 方法
                return ret == null ? undefined : ret;
            }
        },
        removeAttr: function (elem, value) {
            var name, propName, i = 0,
                attrNames = value && value.match(core_rnotwhite); // 通过空格分割成数组
            // 兼容  $('#id').removeAttr('miaov href id')
            if (attrNames && elem.nodeType === 1) {
                while ((name = attrNames[i++])) { // 循环 remove
                    propName = jQuery.propFix[name] || name; // 兼容 class 和 className 写法
                    if (jQuery.expr.match.bool.test(name)) {
                        elem[propName] = false;  // 匹配相关的 属性的值 设置为 false
                    }
                    elem.removeAttribute(name);
                }
            }
        },
        attrHooks: {
            type: {
                set: function (elem, value) {
                    // 兼容性处理 radioValue
                    if (!jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem,
                        "input")) {
                        var val = elem.value;
                        elem.setAttribute("type", value); // 先设置类型，在设置值
                        if (val) {
                            elem.value = val;
                        }
                        return value;
                    }
                }
            }
        },
        propFix: {
            "for": "htmlFor",
            "class": "className"
        },
        prop: function (elem, name, value) {
            var ret, hooks, notxml, nType = elem.nodeType;
            if (!elem || nType === 3 || nType === 8 || nType === 2) {
                return;
            } // 非元素节点过滤掉
            notxml = nType !== 1 || !jQuery.isXMLDoc(elem);
            if (notxml) {  // 不是 xml
                name = jQuery.propFix[name] || name;
                hooks = jQuery.propHooks[name];
            }
            if (value !== undefined) { // 设置 ，先看是否兼容
                return hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined ?
                    ret : (elem[name] = value);
            } else { // 获取， 先看是否兼容
                return hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null ? ret : elem[
                    name];
            }
        },
        propHooks: {
            tabIndex: { // 可以设置光标切换的顺序
                get: function (elem) {
                    return elem.hasAttribute("tabindex") || rfocusable.test(elem.nodeName) || elem.href ?
                        elem.tabIndex : -1;
                }
            }
        }
    });
    boolHook = {
        set: function (elem, value, name) {
            if (value === false) {
                jQuery.removeAttr(elem, name);
            } else {
                elem.setAttribute(name, name);
            }
            return name;
        }
    };
    jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
        var getter = jQuery.expr.attrHandle[name] || jQuery.find.attr;
        jQuery.expr.attrHandle[name] = function (elem, name, isXML) {
            var fn = jQuery.expr.attrHandle[name],
                ret = isXML ? undefined : (jQuery.expr.attrHandle[name] = undefined) != getter(elem,
                    name, isXML) ? name.toLowerCase() : null;
            jQuery.expr.attrHandle[name] = fn;
            return ret;
        };
    });
    // 与 prop 相关，兼容性做法
    if (!jQuery.support.optSelected) {
        jQuery.propHooks.selected = {
            get: function (elem) {
                var parent = elem.parentNode;
                if (parent && parent.parentNode) {
                    parent.parentNode.selectedIndex;
                }
                return null;
            }
        };
    }
    // 与 prop 相关，兼容这些特定的  小写形式
    jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap",
        "frameBorder", "contentEditable"], function () {
            jQuery.propFix[this.toLowerCase()] = this;
        });
    // Radios and checkboxes getter/setter
    jQuery.each(["radio", "checkbox"], function () {
        jQuery.valHooks[this] = {
            set: function (elem, value) {
                if (jQuery.isArray(value)) {
                    return (elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0); // 设置选中状态
                }
            }
        };
        if (!jQuery.support.checkOn) {
            jQuery.valHooks[this].get = function (elem) {
                // Support: Webkit
                // "" is returned instead of 'on' if a value isn't specified
                return elem.getAttribute("value") === null ? "on" : elem.value;
            };
        }
    });
    // 事件开始
    var rkeyEvent = /^key/,
        rmouseEvent = /^(?:mouse|contextmenu)|click/,
        rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
        rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

    function returnTrue() {
        return true;
    }

    function returnFalse() {
        return false;
    }

    function safeActiveElement() {
        try {
            return document.activeElement;
        } catch (err) { }
    }
    jQuery.event = { // 事件
        global: {},
        add: function (elem, types, handler, data, selector) { // 绑定事件 =》 dispatch
            var handleObjIn, eventHandle, tmp, events, t, handleObj, special, handlers, type, namespaces,
                origType, elemData = data_priv.get(elem);
            if (!elemData) {
                return;
            }
            if (handler.handler) {
                handleObjIn = handler;
                handler = handleObjIn.handler;
                selector = handleObjIn.selector;
            }
            if (!handler.guid) {
                handler.guid = jQuery.guid++; // 给处理函数加一个 guid
            }
            if (!(events = elemData.events)) {
                events = elemData.events = {};   // 不存在就创建
            }
            if (!(eventHandle = elemData.handle)) {
                eventHandle = elemData.handle = function (e) {
                    return typeof jQuery !== core_strundefined && (!e || jQuery.event.triggered !== e.type) ?
                        jQuery.event.dispatch.apply(eventHandle.elem, arguments) : undefined;
                };
                eventHandle.elem = elem; // 防止内存泄漏
            }
            types = (types || "").match(core_rnotwhite) || [""]; // types : 'click mouseover mousedown'
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();  // 存储空间排序
                if (!type) {
                    continue;
                }
                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                special = jQuery.event.special[type] || {};
                handleObj = jQuery.extend({  // 存入每个事件，相应的 handler 的数据格式
                    type: type,
                    origType: origType,
                    data: data,
                    handler: handler,
                    guid: handler.guid,
                    selector: selector,
                    needsContext: selector && jQuery.expr.match.needsContext.test(selector),
                    namespace: namespaces.join(".")
                }, handleObjIn);
                if (!(handlers = events[type])) {
                    handlers = events[type] = [];
                    handlers.delegateCount = 0;
                    if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) { // 是否有特殊的，没有就直接用默认的事件
                        if (elem.addEventListener) {
                            elem.addEventListener(type, eventHandle, false);  // 添加事件监听
                        }
                    }
                }
                if (special.add) {
                    special.add.call(elem, handleObj);
                    if (!handleObj.handler.guid) {
                        handleObj.handler.guid = handler.guid;
                    }
                }
                if (selector) {
                    handlers.splice(handlers.delegateCount++, 0, handleObj); // 将委托的函数放到前面
                } else {
                    handlers.push(handleObj);  // 存储绑定函数
                }
                jQuery.event.global[type] = true;  // 想要之后做优化
            }
            elem = null;  // 防止内存泄漏
        },
        remove: function (elem, types, handler, selector, mappedTypes) {
            var j, origCount, tmp, events, t, handleObj, special, handlers, type, namespaces, origType,
                elemData = data_priv.hasData(elem) && data_priv.get(elem);
            if (!elemData || !(events = elemData.events)) {
                return;
            }
            types = (types || "").match(core_rnotwhite) || [""];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();
                if (!type) {
                    for (type in events) {
                        jQuery.event.remove(elem, type + types[t], handler, selector, true);
                    }
                    continue;
                }
                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                handlers = events[type] || [];
                tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");
                origCount = j = handlers.length;
                while (j--) {
                    handleObj = handlers[j];
                    if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid ===
                        handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector ||
                            selector === handleObj.selector || selector === "**" && handleObj.selector)) {
                        handlers.splice(j, 1);
                        if (handleObj.selector) {
                            handlers.delegateCount--;
                        }
                        if (special.remove) {
                            special.remove.call(elem, handleObj);
                        }
                    }
                }
                if (origCount && !handlers.length) {
                    if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) ===
                        false) { // 有特殊的就用特殊的取消绑定，如果没有就用默认的取消绑定
                        jQuery.removeEvent(elem, type, elemData.handle);  // 删除事件， 就是调用的 3408 行 的removeEventListener
                    }
                    delete events[type];
                }
            }
            if (jQuery.isEmptyObject(events)) {
                delete elemData.handle;
                data_priv.remove(elem, "events");
            }
        },
        trigger: function (event, data, elem, onlyHandlers) { // 考虑到了 冒泡、默认行为、特殊事件 =》 dispatch
            var i, cur, tmp, bubbleType, ontype, handle, special, eventPath = [elem || document],
                type = core_hasOwn.call(event, "type") ? event.type : event,
                namespaces = core_hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
            cur = tmp = elem = elem || document;
            if (elem.nodeType === 3 || elem.nodeType === 8) {
                return;
            }
            if (rfocusMorph.test(type + jQuery.event.triggered)) {
                return;
            }
            if (type.indexOf(".") >= 0) {
                namespaces = type.split(".");
                type = namespaces.shift();
                namespaces.sort();
            }
            ontype = type.indexOf(":") < 0 && "on" + type;
            event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === "object" &&
                event);
            event.isTrigger = onlyHandlers ? 2 : 3;
            event.namespace = namespaces.join(".");
            event.namespace_re = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") +
                "(\\.|$)") : null;
            event.result = undefined;
            if (!event.target) {
                event.target = elem;
            }
            data = data == null ? [event] : jQuery.makeArray(data, [event]);
            special = jQuery.event.special[type] || {};
            if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
                return;
            }
            if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
                bubbleType = special.delegateType || type;
                if (!rfocusMorph.test(bubbleType + type)) {
                    cur = cur.parentNode;
                }
                for (; cur; cur = cur.parentNode) {
                    eventPath.push(cur);
                    tmp = cur;
                }
                if (tmp === (elem.ownerDocument || document)) {
                    eventPath.push(tmp.defaultView || tmp.parentWindow || window);
                }
            }
            i = 0;
            while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
                event.type = i > 1 ? bubbleType : special.bindType || type;
                handle = (data_priv.get(cur, "events") || {})[event.type] && data_priv.get(cur, "handle");
                if (handle) {
                    handle.apply(cur, data);  // 函数存在就执行
                }
                handle = ontype && cur[ontype];
                if (handle && jQuery.acceptData(cur) && handle.apply && handle.apply(cur, data) === false) {
                    event.preventDefault();
                }
            }
            event.type = type;
            if (!onlyHandlers && !event.isDefaultPrevented()) {
                if ((!special._default || special._default.apply(eventPath.pop(), data) === false) &&
                    jQuery.acceptData(elem)) {
                    if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {
                        tmp = elem[ontype];
                        if (tmp) {
                            elem[ontype] = null;
                        }
                        jQuery.event.triggered = type;
                        elem[type]();
                        jQuery.event.triggered = undefined;
                        if (tmp) {
                            elem[ontype] = tmp;
                        }
                    }
                }
            }
            return event.result;
        },
        dispatch: function (event) { // 派发事件的具体操作
            event = jQuery.event.fix(event); // 1. event 对象的兼容处理
            var i, j, ret, matched, handleObj, handlerQueue = [],
                args = core_slice.call(arguments),
                handlers = (data_priv.get(this, "events") || {})[event.type] || [],
                special = jQuery.event.special[event.type] || {};  // 2. 特殊事件的处理
            args[0] = event;
            event.delegateTarget = this;
            if (special.preDispatch && special.preDispatch.call(this, event) === false) { // 事件执行之前，是否执行特殊的事件
                return;
            }
            handlerQueue = jQuery.event.handlers.call(this, event, handlers); // 3. 函数执行顺序的操作
            i = 0;
            while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
                event.currentTarget = matched.elem;
                j = 0;
                while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) { // isImmediatePropagationStopped 是否兼容同类型的监听事件（是否single）
                    if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {
                        event.handleObj = handleObj;
                        event.data = handleObj.data;
                        ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler)
                            .apply(matched.elem, args);
                        if (ret !== undefined) {
                            if ((event.result = ret) === false) {  // 阻止默认事件
                                event.preventDefault();
                                event.stopPropagation();
                            }
                        }
                    }
                }
            }
            if (special.postDispatch) {
                special.postDispatch.call(this, event);
            }
            return event.result;
        },
        handlers: function (event, handlers) { // 函数执行顺序的操作
            var i, matches, sel, handleObj, handlerQueue = [],
                delegateCount = handlers.delegateCount,
                cur = event.target;
            if (delegateCount && cur.nodeType && (!event.button || event.type !== "click")) {
                for (; cur !== this; cur = cur.parentNode || this) {
                    if (cur.disabled !== true || event.type !== "click") {
                        matches = [];
                        for (i = 0; i < delegateCount; i++) {
                            handleObj = handlers[i];
                            sel = handleObj.selector + " ";
                            if (matches[sel] === undefined) {
                                matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) >= 0 :
                                    jQuery.find(sel, this, null, [cur]).length;
                            }
                            if (matches[sel]) {
                                matches.push(handleObj);
                            }
                        }
                        if (matches.length) {
                            handlerQueue.push({
                                elem: cur,
                                handlers: matches
                            });
                        }
                    }
                }
            }
            if (delegateCount < handlers.length) {
                handlerQueue.push({
                    elem: this,
                    handlers: handlers.slice(delegateCount)
                });
            }
            return handlerQueue;
        },
        props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which"
            .split(" "),  // JQ中共享原生 JS 的 event 属性
        fixHooks: {}, // 收集了 event 兼容的集合
        keyHooks: { // 解决键盘相关的兼容操作
            props: "char charCode key keyCode".split(" "),
            filter: function (event, original) {
                if (event.which == null) {
                    event.which = original.charCode != null ? original.charCode : original.keyCode; // 兼容处理
                }
                return event;
            }
        },
        mouseHooks: { // 解决鼠标相关的兼容操作
            props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(
                " "),
            filter: function (event, original) {
                var eventDoc, doc, body, button = original.button;
                if (event.pageX == null && original.clientX != null) { // 兼容处理 pageX , pageY
                    eventDoc = event.target.ownerDocument || document;
                    doc = eventDoc.documentElement;
                    body = eventDoc.body;
                    event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) -
                        (doc && doc.clientLeft || body && body.clientLeft || 0);
                    event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) -
                        (doc && doc.clientTop || body && body.clientTop || 0);
                }
                if (!event.which && button !== undefined) {
                    event.which = (button & 1 ? 1 : (button & 2 ? 3 : (button & 4 ? 2 : 0)));
                }
                return event;
            }
        },
        fix: function (event) { // event 对象的兼容处理
            if (event[jQuery.expando]) {
                return event;
            }
            var i, prop, copy, type = event.type,
                originalEvent = event,
                fixHook = this.fixHooks[type];
            if (!fixHook) {
                this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(
                    type) ? this.keyHooks : {}; // 对鼠标、键盘的兼容处理
            }
            copy = fixHook.props ? this.props.concat(fixHook.props) : this.props; // 共享的 event 属性
            event = new jQuery.Event(originalEvent);  // 增强版 Event 
            i = copy.length;
            while (i--) {
                prop = copy[i];
                event[prop] = originalEvent[prop]; // 拷贝原生的没有做兼容的处理，在 鼠标、键盘 中
            }
            if (!event.target) {
                event.target = document; // 移动端的兼容性处理
            }
            if (event.target.nodeType === 3) {
                event.target = event.target.parentNode; // 事件源不能是一个文本节点
            }
            return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
        },
        special: { // 特殊事件的处理
            load: {
                noBubble: true
            },
            focus: { // 模拟原生特性：focus 无法冒泡处理
                trigger: function () {
                    if (this !== safeActiveElement() && this.focus) {
                        this.focus();
                        return false;
                    }
                },
                delegateType: "focusin"  // 委托之后模拟
            },
            blur: { // 模拟原生特性：blur 无法冒泡处理
                trigger: function () {
                    if (this === safeActiveElement() && this.blur) {
                        this.blur();
                        return false;
                    }
                },
                delegateType: "focusout"  // 委托之后模拟
            },
            click: {
                trigger: function () {
                    if (this.type === "checkbox" && this.click && jQuery.nodeName(this, "input")) {
                        this.click();
                        return false;
                    }
                },
                _default: function (event) {
                    return jQuery.nodeName(event.target, "a");  // checkbox 的 a 标签不触发跳转事件
                }
            },
            beforeunload: {
                postDispatch: function (event) {
                    if (event.result !== undefined) {
                        event.originalEvent.returnValue = event.result;
                    }
                }
            }
        },
        simulate: function (type, elem, event, bubble) {
            var e = jQuery.extend(new jQuery.Event(), event, {
                type: type,
                isSimulated: true,
                originalEvent: {}
            });
            if (bubble) {
                jQuery.event.trigger(e, null, elem);
            } else {
                jQuery.event.dispatch.call(elem, e);
            }
            if (e.isDefaultPrevented()) {
                event.preventDefault();
            }
        }
    };
    jQuery.removeEvent = function (elem, type, handle) {
        if (elem.removeEventListener) {
            elem.removeEventListener(type, handle, false);
        }
    };
    // 面向对象写法
    jQuery.Event = function (src, props) {
        if (!(this instanceof jQuery.Event)) {
            return new jQuery.Event(src, props);
        }
        if (src && src.type) {
            this.originalEvent = src;
            this.type = src.type;
            this.isDefaultPrevented = (src.defaultPrevented || src.getPreventDefault && src.getPreventDefault()) ?
                returnTrue : returnFalse;
        } else {
            this.type = src;
        }
        if (props) {
            jQuery.extend(this, props);
        }
        this.timeStamp = src && src.timeStamp || jQuery.now();
        this[jQuery.expando] = true;
    };
    jQuery.Event.prototype = {
        isDefaultPrevented: returnFalse,  // false
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,
        preventDefault: function () { // 阻止默认事件
            var e = this.originalEvent;
            this.isDefaultPrevented = returnTrue;
            if (e && e.preventDefault) {
                e.preventDefault();
            }
        },
        stopPropagation: function () { // 阻止冒泡
            var e = this.originalEvent;
            this.isPropagationStopped = returnTrue;
            if (e && e.stopPropagation) {
                e.stopPropagation();
            }
        },
        stopImmediatePropagation: function () { // 阻止冒泡，相同元素的其他事件也禁止掉
            this.isImmediatePropagationStopped = returnTrue;  // 在 dispatch 里面阻止，isImmediatePropagationStopped (3237)
            this.stopPropagation();
        }
    };
    // 与 special 的事件一起看，规于 special - focusin | focusout | mouseover | mouseout
    jQuery.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout"
    }, function (orig, fix) {
        jQuery.event.special[orig] = {
            delegateType: fix,
            bindType: fix,
            handle: function (event) {
                var ret, target = this,
                    related = event.relatedTarget,
                    handleObj = event.handleObj;
                if (!related || (related !== target && !jQuery.contains(target, related))) {
                    event.type = handleObj.origType;
                    ret = handleObj.handler.apply(this, arguments);
                    event.type = fix;
                }
                return ret;
            }
        };
    });
    if (!jQuery.support.focusinBubbles) {
        jQuery.each({
            focus: "focusin",
            blur: "focusout"
        }, function (orig, fix) {
            var attaches = 0,
                handler = function (event) {
                    jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);
                };
            jQuery.event.special[fix] = {
                setup: function () { // 特殊的
                    if (attaches++ === 0) {
                        document.addEventListener(orig, handler, true);
                    }
                },
                teardown: function () { // 取消特殊事件
                    if (--attaches === 0) {
                        document.removeEventListener(orig, handler, true);
                    }
                }
            };
        });
    }
    jQuery.fn.extend({
        on: function (types, selector, data, fn, one) {
            var origFn, type;  // 没做什么实质的东西，做了些兼容性的处理，真正的还是在 add 当中
            if (typeof types === "object") {
                if (typeof selector !== "string") { // 参数判断
                    data = data || selector;
                    selector = undefined;
                }
                for (type in types) {
                    this.on(type, selector, data, types[type], one);  // 数组拆分，以便适应  $().on('click': ..., 'mouseover': ...) 这种写法
                }
                return this;
            }
            if (data == null && fn == null) {  // 参数判断
                fn = selector;
                data = selector = undefined;
            } else if (fn == null) {
                if (typeof selector === "string") {
                    fn = data;
                    data = undefined;
                } else {
                    fn = data;
                    data = selector;
                    selector = undefined;
                }
            }
            if (fn === false) {
                fn = returnFalse;
            } else if (!fn) {
                return this;
            }
            if (one === 1) {
                origFn = fn;
                fn = function (event) {
                    jQuery().off(event); // 取消事件
                    return origFn.apply(this, arguments);
                };
                fn.guid = origFn.guid || (origFn.guid = jQuery.guid++); // guid: 绑定事件的唯一标识，可能是事件函数，可以直接通过标识找到
            }
            return this.each(function () {
                jQuery.event.add(this, types, fn, data, selector); // 实质操作
            });
        },
        one: function (types, selector, data, fn) {
            return this.on(types, selector, data, fn, 1);
        },
        off: function (types, selector, fn) {
            var handleObj, type;
            if (types && types.preventDefault && types.handleObj) {
                handleObj = types.handleObj;
                jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." +
                    handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler
                );
                return this;
            } // 复杂
            if (typeof types === "object") {
                for (type in types) {
                    this.off(type, selector, types[type]);  // 数组
                }
                return this;
            }
            if (selector === false || typeof selector === "function") { // 参数修正
                fn = selector;
                selector = undefined;
            }
            if (fn === false) {
                fn = returnFalse;
            }
            return this.each(function () {
                jQuery.event.remove(this, types, fn, selector); // remove
            });
        },
        trigger: function (type, data) {
            return this.each(function () {
                jQuery.event.trigger(type, data, this); // trigger
            });
        },
        triggerHandler: function (type, data) { // 会触发事件，但不触发事件的默认行为
            var elem = this[0];
            if (elem) {
                return jQuery.event.trigger(type, data, elem, true);  // trigger
            }
        }
    });
    var isSimple = /^.[^:#\[\.,]*$/,
        rparentsprev = /^(?:parents|prev(?:Until|All))/,
        rneedsContext = jQuery.expr.match.needsContext,
        guaranteedUnique = {
            children: true,
            contents: true,
            next: true,
            prev: true
        };
    // DOM 操作的一些方法
    jQuery.fn.extend({
        find: function (selector) {
            var i, ret = [],
                self = this,
                len = self.length;
            if (typeof selector !== "string") { // 选择元素非字符串时，即 节点元素
                return this.pushStack(jQuery(selector).filter(function () {
                    for (i = 0; i < len; i++) {
                        if (jQuery.contains(self[i], this)) {
                            return true;
                        }
                    } // 循环是否包含对应的元素
                })); // 进行入栈操作
            }
            for (i = 0; i < len; i++) {
                jQuery.find(selector, self[i], ret); // 递归查找
            }
            ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret); // unique 过滤掉重复的
            ret.selector = this.selector ? this.selector + " " + selector : selector;
            return ret;
        },
        has: function (target) { // 例如 $('div').has('box')
            var targets = jQuery(target, this),
                l = targets.length;
            return this.filter(function () {  // 在 $('div') 中 过滤
                var i = 0;
                for (; i < l; i++) {
                    if (jQuery.contains(this, targets[i])) { // $('div') 是否包含 $('box')
                        return true;
                    }
                }
            });
        },
        not: function (selector) { // winnow => filter 函数 ，利用 true 或者 false 控制取反
            return this.pushStack(winnow(this, selector || [], true)); // pushStack 入栈的方法，方便管理
        },
        filter: function (selector) { // winnow => filter 函数
            return this.pushStack(winnow(this, selector || [], false));
        },
        is: function (selector) {
            return !!winnow(this, typeof selector === "string" && rneedsContext.test(selector) ? jQuery(
                selector) : selector || [], false).length; // 不支持相对的写法, 例如 $('div:first').is('div:last')
        },
        closest: function (selectors, context) { // 找 selectors 中最近的 context
            var cur, i = 0,
                l = this.length,
                matched = [],
                pos = (rneedsContext.test(selectors) || typeof selectors !== "string") ? jQuery(
                    selectors, context || this.context) : 0;
            for (; i < l; i++) { // 范围里面
                for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
                    if (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 : cur.nodeType === 1 && jQuery.find
                        .matchesSelector(cur, selectors))) {
                        cur = matched.push(cur);
                        break;
                    }
                }
            }
            return this.pushStack(matched.length > 1 ? jQuery.unique(matched) : matched); // 还要去重
        },
        index: function (elem) { // 找某个值的索引
            if (!elem) {  // $('#a1').index() 
                return (this[0] && this[0].parentNode) ? this.first().prevAll().length : -1;
            }
            if (typeof elem === "string") { // $('#a1').index('span'): span 里面找 #a1 元素
                return core_indexOf.call(jQuery(elem), this[0]);
            }
            return core_indexOf.call(this, elem.jquery ? elem[0] : elem); // $('span').index( $('#a1') ): span 里面找 #a1 元素
        },
        add: function (selector, context) {
            var set = typeof selector === "string" ? jQuery(selector, context) : jQuery.makeArray(
                selector && selector.nodeType ? [selector] : selector), // 特殊的 jQuery 对象形式， string 判断涉及不同方式 context（作用域的区别）
                all = jQuery.merge(this.get(), set);  // 合成一个整体
            return this.pushStack(jQuery.unique(all)); // 去掉重复的结点，加入栈中
        },
        addBack: function (selector) { // 将栈中下一层元素也add 进来进行操作
            return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
        }
    });

    function sibling(cur, dir) {
        while ((cur = cur[dir]) && cur.nodeType !== 1) { }
        return cur;
    }
    jQuery.each({
        parent: function (elem) {
            var parent = elem.parentNode;
            return parent && parent.nodeType !== 11 ? parent : null;
        },
        parents: function (elem) { // jQuery.dir 
            return jQuery.dir(elem, "parentNode");
        },
        parentsUntil: function (elem, i, until) {
            return jQuery.dir(elem, "parentNode", until);
        },
        next: function (elem) {
            return sibling(elem, "nextSibling");
        },
        prev: function (elem) {
            return sibling(elem, "previousSibling");
        },
        nextAll: function (elem) {
            return jQuery.dir(elem, "nextSibling");
        },
        prevAll: function (elem) {
            return jQuery.dir(elem, "previousSibling");
        },
        nextUntil: function (elem, i, until) {
            return jQuery.dir(elem, "nextSibling", until);
        },
        prevUntil: function (elem, i, until) {
            return jQuery.dir(elem, "previousSibling", until);
        },
        siblings: function (elem) {
            return jQuery.sibling((elem.parentNode || {}).firstChild, elem);
        },
        children: function (elem) {
            return jQuery.sibling(elem.firstChild);
        },
        contents: function (elem) { // 获取所有的结点
            return elem.contentDocument || jQuery.merge([], elem.childNodes);
        }
    }, function (name, fn) {
        jQuery.fn[name] = function (until, selector) {  // 通用的函数，扩展上面的方法
            var matched = jQuery.map(this, fn, until);
            if (name.slice(-5) !== "Until") {
                selector = until;
            }
            if (selector && typeof selector === "string") {
                matched = jQuery.filter(selector, matched);
            }
            if (this.length > 1) {
                if (!guaranteedUnique[name]) {
                    jQuery.unique(matched); // 不仅去重，而且重新排了个序
                }
                if (rparentsprev.test(name)) {  // 匹配出现乱序的情况：从内向外 的 parent | prev (兄弟)
                    matched.reverse(); // 重新排序
                }
            }
            return this.pushStack(matched);
        };
    });
    jQuery.extend({
        filter: function (expr, elems, not) {
            var elem = elems[0];
            if (not) {
                expr = ":not(" + expr + ")"; // 是否取反筛选
            }
            return elems.length === 1 && elem.nodeType === 1 ? jQuery.find.matchesSelector(elem, expr) ?
                [elem] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
                    return elem.nodeType === 1;
                })); // matchesSelector 匹配一个元素，matches 匹配多个元素
        },
        dir: function (elem, dir, until) {
            var matched = [],
                truncate = until !== undefined;  // 是否终点
            while ((elem = elem[dir]) && elem.nodeType !== 9) {
                if (elem.nodeType === 1) {  // 元素节点后续进行操作
                    if (truncate && jQuery(elem).is(until)) {
                        break;
                    }
                    matched.push(elem);
                }
            }
            return matched;
        },
        sibling: function (n, elem) {
            var matched = [];
            for (; n; n = n.nextSibling) {
                if (n.nodeType === 1 && n !== elem) {
                    matched.push(n);
                }
            }
            return matched;
        }
    });

    function winnow(elements, qualifier, not) { // 实现过滤器的功能， elements 多个div, qualifier 过滤条件, not 布尔值
        if (jQuery.isFunction(qualifier)) { // 接受函数，例如 $('div').filter(function(elem){ return elem.className == 'box' }).css(......)
            return jQuery.grep(elements, function (elem, i) {
                return !!qualifier.call(elem, i, elem) !== not;
            });
        }
        if (qualifier.nodeType) { // 筛选元素，$('div').filter($('.box')).css(...)
            return jQuery.grep(elements, function (elem) {
                return (elem === qualifier) !== not;
            });
        }
        if (typeof qualifier === "string") {  // 字符串操作
            if (isSimple.test(qualifier)) {  // 筛选是否是简单点的
                return jQuery.filter(qualifier, elements, not);  // 内部函数，调用了 Sizzle
            }
            qualifier = jQuery.filter(qualifier, elements); // 复杂的选择器，直接 not 没法进行取反，所以没有 传递 not 参数
        }
        return jQuery.grep(elements, function (elem) {
            return (core_indexOf.call(qualifier, elem) >= 0) !== not; // 复杂情况筛选下是否 取反
        });
    }
    var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
        rtagName = /<([\w:]+)/,
        rhtml = /<|&#?\w+;/,
        rnoInnerhtml = /<(?:script|style|link)/i,
        manipulation_rcheckableType = /^(?:checkbox|radio)$/i,
        rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
        rscriptType = /^$|\/(?:java|ecma)script/i,
        rscriptTypeMasked = /^true\/(.*)/,
        rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
        wrapMap = {  // 针对 严格 的 xhtml
            option: [1, "<select multiple='multiple'>", "</select>"],
            thead: [1, "<table>", "</table>"],
            col: [2, "<table><colgroup>", "</colgroup></table>"],
            tr: [2, "<table><tbody>", "</tbody></table>"],
            td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
            _default: [0, "", ""]
        };
    wrapMap.optgroup = wrapMap.option;
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;
    // DOM 操作的一些方法
    jQuery.fn.extend({
        text: function (value) {
            return jQuery.access(this, function (value) { // access 通用组装方法
                return value === undefined ? jQuery.text(this) : this.empty().append((this[0] &&
                    this[0].ownerDocument || document).createTextNode(value)); // jQuery.text  是 sizzle 中的方法， 设置时先清空再添加
            }, null, value, arguments.length);
        },
        append: function () {
            return this.domManip(arguments, function (elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var target = manipulationTarget(this, elem); // 修正，为 ie 6 7 准备，高版本无所谓
                    target.appendChild(elem);
                }
            });
        },
        prepend: function () {
            return this.domManip(arguments, function (elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var target = manipulationTarget(this, elem);
                    target.insertBefore(elem, target.firstChild);  // 添加到第一个子节点前面
                }
            });
        },
        before: function () {
            return this.domManip(arguments, function (elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this);
                }
            });
        },
        after: function () {
            return this.domManip(arguments, function (elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this.nextSibling); // 仍然调用原生的 insertBefore 
                }
            });
        },
        remove: function (selector, keepData) {  // keepData 区分 remove 还是 detach
            var elem, elems = selector ? jQuery.filter(selector, this) : this,
                i = 0;
            for (;
                (elem = elems[i]) != null; i++) {
                if (!keepData && elem.nodeType === 1) {
                    jQuery.cleanData(getAll(elem));  // 删除相应的事件
                }
                if (elem.parentNode) {
                    if (keepData && jQuery.contains(elem.ownerDocument, elem)) {
                        setGlobalEval(getAll(elem, "script"));
                    }
                    elem.parentNode.removeChild(elem);
                }
            }
            return this;
        },
        empty: function () {
            var elem, i = 0;
            for (;
                (elem = this[i]) != null; i++) {
                if (elem.nodeType === 1) {
                    jQuery.cleanData(getAll(elem, false));  // 清空的 ， 在 remove 函数中也用到了
                    elem.textContent = "";
                }
            }
            return this;
        },
        clone: function (dataAndEvents, deepDataAndEvents) {
            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
            return this.map(function () {
                return jQuery.clone(this, dataAndEvents, deepDataAndEvents); // 调用 jQuery.clone
            });
        },
        html: function (value) {
            return jQuery.access(this, function (value) {
                var elem = this[0] || {},
                    i = 0,
                    l = this.length;
                if (value === undefined && elem.nodeType === 1) { // 直接获取
                    return elem.innerHTML;
                }
                if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(
                    rtagName.exec(value) || ["", ""])[1].toLowerCase()]) { // 检查不是 script link style ， tr 等等也不会在这添加
                    value = value.replace(rxhtmlTag, "<$1></$2>"); // 当标签写的不规范时，进行兼容性处理
                    try {
                        for (; i < l; i++) {
                            elem = this[i] || {};
                            if (elem.nodeType === 1) {
                                jQuery.cleanData(getAll(elem, false)); // 清空下面的全部东西
                                elem.innerHTML = value;
                            }
                        }
                        elem = 0;
                    } catch (e) { }
                }
                if (elem) { // script link style ， 可以使得 代码生效; tr 等等需要严格标签包裹的也走这里，可以直接添加上去
                    this.empty().append(value);
                }
            }, null, value, arguments.length);
        },
        replaceWith: function () {
            var
                args = jQuery.map(this, function (elem) {
                    return [elem.nextSibling, elem.parentNode];
                }),
                i = 0;
            this.domManip(arguments, function (elem) {
                var next = args[i++],
                    parent = args[i++];
                if (parent) {
                    if (next && next.parentNode !== parent) {
                        next = this.nextSibling;
                    }
                    jQuery(this).remove();
                    parent.insertBefore(elem, next);
                }
            }, true);
            return i ? this : this.remove();
        },
        detach: function (selector) {
            return this.remove(selector, true);
        },
        domManip: function (args, callback, allowIntersection) {
            args = core_concat.apply([], args);
            var fragment, first, scripts, hasScripts, node, doc, i = 0,
                l = this.length,
                set = this,
                iNoClone = l - 1,
                value = args[0],
                isFunction = jQuery.isFunction(value);
            if (isFunction || !(l <= 1 || typeof value !== "string" || jQuery.support.checkClone || !
                rchecked.test(value))) {
                return this.each(function (index) {
                    var self = set.eq(index);
                    if (isFunction) {
                        args[0] = value.call(this, index, self.html());
                    }
                    self.domManip(args, callback, allowIntersection);
                });
            }
            if (l) {
                fragment = jQuery.buildFragment(args, this[0].ownerDocument, false, !allowIntersection &&
                    this);  // 创建文档碎片
                first = fragment.firstChild;
                if (fragment.childNodes.length === 1) { // 针对单一的
                    fragment = first;
                }
                if (first) {
                    scripts = jQuery.map(getAll(fragment, "script"), disableScript); // 对 script 标签处理，阻止 script 操作
                    hasScripts = scripts.length;
                    for (; i < l; i++) {
                        node = fragment;
                        if (i !== iNoClone) {
                            node = jQuery.clone(node, true, true); // 克隆
                            if (hasScripts) {
                                jQuery.merge(scripts, getAll(node, "script")); // script 合并
                            }
                        }
                        callback.call(this[i], node, i); // 回调处理， domManip， 具体实现
                    }
                    if (hasScripts) {
                        doc = scripts[scripts.length - 1].ownerDocument;
                        jQuery.map(scripts, restoreScript);
                        for (i = 0; i < hasScripts; i++) {
                            node = scripts[i];
                            if (rscriptType.test(node.type || "") && !data_priv.access(node,
                                "globalEval") && jQuery.contains(doc, node)) {
                                if (node.src) {
                                    jQuery._evalUrl(node.src); // 通过 ajax 的方式 get 请求
                                } else {
                                    jQuery.globalEval(node.textContent.replace(rcleanScript, "")); // 全局的执行
                                }
                            }
                        }
                    }
                }
            }
            return this;
        }
    });
    jQuery.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function (name, original) { // 进行一些变体，复用之前的函数
        jQuery.fn[name] = function (selector) {
            var elems, ret = [],
                insert = jQuery(selector),
                last = insert.length - 1,
                i = 0;
            for (; i <= last; i++) {
                elems = i === last ? this : this.clone(true);
                jQuery(insert[i])[original](elems);
                core_push.apply(ret, elems.get());
            }
            return this.pushStack(ret);
        };
    });
    jQuery.extend({ // 辅助，上面的函数调用
        clone: function (elem, dataAndEvents, deepDataAndEvents) {
            var i, l, srcElements, destElements, clone = elem.cloneNode(true),
                inPage = jQuery.contains(elem.ownerDocument, elem);
            if (!jQuery.support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !
                jQuery.isXMLDoc(elem)) { // IE >= 9, checkbox clone issues
                destElements = getAll(clone);
                srcElements = getAll(elem);
                for (i = 0, l = srcElements.length; i < l; i++) {
                    fixInput(srcElements[i], destElements[i]);  // 兼容处理 
                }
            }
            if (dataAndEvents) {
                if (deepDataAndEvents) {
                    srcElements = srcElements || getAll(elem);
                    destElements = destElements || getAll(clone);
                    for (i = 0, l = srcElements.length; i < l; i++) {
                        cloneCopyEvent(srcElements[i], destElements[i]);
                    }
                } else {
                    cloneCopyEvent(elem, clone);
                }
            }
            destElements = getAll(clone, "script");
            if (destElements.length > 0) {
                setGlobalEval(destElements, !inPage && getAll(elem, "script"));
            }
            return clone;
        },
        buildFragment: function (elems, context, scripts, selection) {
            var elem, tmp, tag, wrap, contains, j, i = 0,
                l = elems.length,
                fragment = context.createDocumentFragment(),
                nodes = []; // 创建好的结点集合
            for (; i < l; i++) {
                elem = elems[i];
                if (elem || elem === 0) {
                    if (jQuery.type(elem) === "object") { // object
                        jQuery.merge(nodes, elem.nodeType ? [elem] : elem);
                    } else if (!rhtml.test(elem)) { // 纯原生
                        nodes.push(context.createTextNode(elem));
                    } else {
                        tmp = tmp || fragment.appendChild(context.createElement("div"));
                        tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
                        wrap = wrapMap[tag] || wrapMap._default; // 兼容那些需要被包含的标签， 比如 tr td option...
                        tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, "<$1></$2>") + wrap[2];
                        j = wrap[0];
                        while (j--) {
                            tmp = tmp.lastChild;
                        }
                        jQuery.merge(nodes, tmp.childNodes);
                        tmp = fragment.firstChild;
                        tmp.textContent = "";
                    }
                }
            }
            fragment.textContent = ""; // 内存泄漏处理
            i = 0;
            while ((elem = nodes[i++])) {
                if (selection && jQuery.inArray(elem, selection) !== -1) {
                    continue;
                }
                contains = jQuery.contains(elem.ownerDocument, elem);
                tmp = getAll(fragment.appendChild(elem), "script"); // script 标签
                if (contains) {
                    setGlobalEval(tmp);
                }
                if (scripts) {
                    j = 0;
                    while ((elem = tmp[j++])) {
                        if (rscriptType.test(elem.type || "")) {
                            scripts.push(elem);
                        }
                    }
                }
            }
            return fragment;
        },
        cleanData: function (elems) {
            var data, elem, events, type, key, j, special = jQuery.event.special,
                i = 0;
            for (;
                (elem = elems[i]) !== undefined; i++) {
                if (Data.accepts(elem)) {
                    key = elem[data_priv.expando];
                    if (key && (data = data_priv.cache[key])) { // 删除事件的操作
                        events = Object.keys(data.events || {});
                        if (events.length) {
                            for (j = 0;
                                (type = events[j]) !== undefined; j++) {
                                if (special[type]) {
                                    jQuery.event.remove(elem, type);
                                } else {
                                    jQuery.removeEvent(elem, type, data.handle);
                                }
                            }
                        }
                        if (data_priv.cache[key]) {
                            delete data_priv.cache[key];
                        }
                    }
                }
                delete data_user.cache[elem[data_user.expando]]; // 删除缓存的操作
            }
        },
        _evalUrl: function (url) {
            return jQuery.ajax({
                url: url,
                type: "GET",
                dataType: "script",
                async: false,
                global: false,
                "throws": true
            });
        }
    });

    function manipulationTarget(elem, content) {
        return jQuery.nodeName(elem, "table") && jQuery.nodeName(content.nodeType === 1 ? content : content.firstChild,
            "tr") ? elem.getElementsByTagName("tbody")[0] || elem.appendChild(elem.ownerDocument.createElement(
                "tbody")) : elem;
    }

    function disableScript(elem) {
        elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
        return elem;
    }

    function restoreScript(elem) {
        var match = rscriptTypeMasked.exec(elem.type);
        if (match) {
            elem.type = match[1];
        } else {
            elem.removeAttribute("type");
        }
        return elem;
    }

    function setGlobalEval(elems, refElements) {
        var l = elems.length,
            i = 0;
        for (; i < l; i++) {
            data_priv.set(elems[i], "globalEval", !refElements || data_priv.get(refElements[i], "globalEval"));
        }
    }

    function cloneCopyEvent(src, dest) {
        var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;
        if (dest.nodeType !== 1) {
            return;
        }
        if (data_priv.hasData(src)) {
            pdataOld = data_priv.access(src);
            pdataCur = data_priv.set(dest, pdataOld);
            events = pdataOld.events;
            if (events) {
                delete pdataCur.handle;
                pdataCur.events = {};
                for (type in events) {
                    for (i = 0, l = events[type].length; i < l; i++) {
                        jQuery.event.add(dest, type, events[type][i]);
                    }
                }
            }
        }
        if (data_user.hasData(src)) {
            udataOld = data_user.access(src);
            udataCur = jQuery.extend({}, udataOld);
            data_user.set(dest, udataCur);
        }
    }

    function getAll(context, tag) { // tag 可以不传，指定的标签或者 false
        var ret = context.getElementsByTagName ? context.getElementsByTagName(tag || "*") : context.querySelectorAll ?
            context.querySelectorAll(tag || "*") : [];
        return tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([context], ret) : ret;
    }

    function fixInput(src, dest) {
        var nodeName = dest.nodeName.toLowerCase();
        if (nodeName === "input" && manipulation_rcheckableType.test(src.type)) {
            dest.checked = src.checked;
        } else if (nodeName === "input" || nodeName === "textarea") {
            dest.defaultValue = src.defaultValue;
        }
    }
    jQuery.fn.extend({
        wrapAll: function (html) {
            var wrap;
            if (jQuery.isFunction(html)) { // 函数回调方式
                return this.each(function (i) { // 每个都包一层
                    jQuery(this).wrapAll(html.call(this, i)); // 还是转成 wrapAll('<div>') 这种
                });
            }
            if (this[0]) {
                wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true); // 包装层
                if (this[0].parentNode) {
                    wrap.insertBefore(this[0]); // 添加到第一个要包装的前面，作为它的前一个兄弟
                }
                wrap.map(function () {
                    var elem = this;
                    while (elem.firstElementChild) {
                        elem = elem.firstElementChild; // 放到 wrap 的最里面一层
                    }
                    return elem;
                }).append(this); // 将 要包装的 塞进去
            }
            return this;
        },
        wrapInner: function (html) {
            if (jQuery.isFunction(html)) {
                return this.each(function (i) {
                    jQuery(this).wrapInner(html.call(this, i));
                });
            }
            return this.each(function () {
                var self = jQuery(this),
                    contents = self.contents(); // 找到子元素
                if (contents.length) {
                    contents.wrapAll(html); // 在子元素外面进行包装
                } else {
                    self.append(html); // 没有子元素时，直接添加
                }
            });
        },
        wrap: function (html) {
            var isFunction = jQuery.isFunction(html);
            return this.each(function (i) { // 分别包
                jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
            });
        },
        unwrap: function () {
            return this.parent().each(function () { // 对每个父级进行替换-删除
                if (!jQuery.nodeName(this, "body")) {
                    jQuery(this).replaceWith(this.childNodes);
                }
            }).end();
        }
    });
    var curCSS, iframe, rdisplayswap = /^(none|table(?!-c[ea]).+)/, // 与 display 一些属性相关，检查是否隐藏
        rmargin = /^margin/,
        rnumsplit = new RegExp("^(" + core_pnum + ")(.*)$", "i"),
        rnumnonpx = new RegExp("^(" + core_pnum + ")(?!px)[a-z%]+$", "i"),
        rrelNum = new RegExp("^([+-])=(" + core_pnum + ")", "i"),
        elemdisplay = {
            BODY: "block"
        },
        cssShow = {
            position: "absolute",
            visibility: "hidden",  // 利用这种隐藏，可以让元素占位，获取元素的宽或高
            display: "block"
        },
        cssNormalTransform = {
            letterSpacing: 0,
            fontWeight: 400
        },
        cssExpand = ["Top", "Right", "Bottom", "Left"],
        cssPrefixes = ["Webkit", "O", "Moz", "ms"];
    // css 样式操作的一些方法
    function vendorPropName(style, name) { // 封装前缀 cssPrefixes
        if (name in style) {
            return name;
        }
        var capName = name.charAt(0).toUpperCase() + name.slice(1),
            origName = name,
            i = cssPrefixes.length;
        while (i--) {
            name = cssPrefixes[i] + capName;
            if (name in style) {
                return name;
            }
        }
        return origName;
    }

    function isHidden(elem, el) { // 判断是否是隐藏状态 ： display=none
        elem = el || elem;
        return jQuery.css(elem, "display") === "none" || !jQuery.contains(elem.ownerDocument, elem);
    }

    function getStyles(elem) { // 调用原生的 getComputedStyle
        return window.getComputedStyle(elem, null);
    }

    function showHide(elements, show) { // 控制显隐，show 参数可以实际控制。
        var display, elem, hidden, values = [],
            index = 0,
            length = elements.length;
        for (; index < length; index++) {
            elem = elements[index];
            if (!elem.style) {
                continue;
            }
            values[index] = data_priv.get(elem, "olddisplay");
            display = elem.style.display;
            if (show) {
                if (!values[index] && display === "none") {
                    elem.style.display = "";
                }
                if (elem.style.display === "" && isHidden(elem)) {
                    values[index] = data_priv.access(elem, "olddisplay", css_defaultDisplay(elem.nodeName)); // css_defaultDisplay 获取原先默认的 display 值
                }
            } else {
                if (!values[index]) {
                    hidden = isHidden(elem);
                    if (display && display !== "none" || !hidden) {
                        data_priv.set(elem, "olddisplay", hidden ? display : jQuery.css(elem, "display"));
                    }
                }
            }
        }
        for (index = 0; index < length; index++) {
            elem = elements[index];
            if (!elem.style) { // 元素没有样式属性
                continue;
            }
            if (!show || elem.style.display === "none" || elem.style.display === "") {
                elem.style.display = show ? values[index] || "" : "none"; // 控制，会根据 默认的来填充，比如 inline \ block \ ...
            }
        }
        return elements;
    }
    jQuery.fn.extend({
        css: function (name, value) {
            return jQuery.access(this, function (elem, name, value) {
                var styles, len, map = {},
                    i = 0;
                if (jQuery.isArray(name)) {
                    styles = getStyles(elem);
                    len = name.length;
                    for (; i < len; i++) {
                        map[name[i]] = jQuery.css(elem, name[i], false, styles);
                    }
                    return map;
                }
                return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem,
                    name); // 如果是设置，走 jQuery.style ; 获取使用 jQuery.css
            }, name, value, arguments.length > 1);
        },
        show: function () {
            return showHide(this, true);
        },
        hide: function () {
            return showHide(this);
        },
        toggle: function (state) {
            if (typeof state === "boolean") {
                return state ? this.show() : this.hide();
            }
            return this.each(function () {
                if (isHidden(this)) {
                    jQuery(this).show();
                } else {
                    jQuery(this).hide();
                }
            });
        }
    });
    // 工具方法，主要就是内部使用
    jQuery.extend({
        cssHooks: {
            opacity: {
                get: function (elem, computed) { // 透明度，自动返回 1; $('#div').css('opacity')
                    if (computed) {
                        var ret = curCSS(elem, "opacity");
                        return ret === "" ? "1" : ret;
                    }
                }
            }
        },
        cssNumber: {
            "columnCount": true,
            "fillOpacity": true,
            "fontWeight": true,
            "lineHeight": true,
            "opacity": true,
            "order": true,
            "orphans": true,
            "widows": true,
            "zIndex": true,
            "zoom": true
        },
        cssProps: {
            "float": "cssFloat"
        },
        style: function (elem, name, value, extra) { // 元素，属性名，属性值，extra 针对尺寸方法
            if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
                return;
            }
            var ret, type, hooks, origName = jQuery.camelCase(name),
                style = elem.style;
            name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style,
                origName));
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            if (value !== undefined) {
                type = typeof value;
                if (type === "string" && (ret = rrelNum.exec(value))) {
                    value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));
                    type = "number";
                }
                if (value == null || type === "number" && isNaN(value)) {
                    return;
                }
                if (type === "number" && !jQuery.cssNumber[origName]) {
                    value += "px";
                }
                if (!jQuery.support.clearCloneStyle && value === "" && name.indexOf("background") ===
                    0) {
                    style[name] = "inherit";
                }
                if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !==
                    undefined) {
                    style[name] = value;
                }
            } else {
                if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
                    return ret;
                }
                return style[name];
            }
        },
        css: function (elem, name, extra, styles) { // 元素，属性名，extra 也是专门针对尺寸相关的，styles 是针对 多个样式时，这里这样设置主要是为了性能考虑
            var val, num, hooks, origName = jQuery.camelCase(name); // 转成驼峰形式
            name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style,
                origName)); // 兼容一些前缀
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // 兼容处理，比如透明度，尺寸...
            if (hooks && "get" in hooks) {
                val = hooks.get(elem, true, extra);
            }
            if (val === undefined) {
                val = curCSS(elem, name, styles);
            }
            if (val === "normal" && name in cssNormalTransform) {
                val = cssNormalTransform[name];
            }
            if (extra === "" || extra) {
                num = parseFloat(val);
                return extra === true || jQuery.isNumeric(num) ? num || 0 : val;
            }
            return val;
        }
    });
    curCSS = function (elem, name, _computed) {
        var width, minWidth, maxWidth, computed = _computed || getStyles(elem), // 如果已经传了_computed / styles 就不会再获取，如果没有，再获取一遍
            ret = computed ? computed.getPropertyValue(name) || computed[name] : undefined,
            style = elem.style;
        if (computed) {
            if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {
                ret = jQuery.style(elem, name);
            }
            if (rnumnonpx.test(ret) && rmargin.test(name)) {
                width = style.width;
                minWidth = style.minWidth;
                maxWidth = style.maxWidth;
                style.minWidth = style.maxWidth = style.width = ret;
                ret = computed.width;
                style.width = width;
                style.minWidth = minWidth;
                style.maxWidth = maxWidth;
            }
        }
        return ret;
    };

    function setPositiveNumber(elem, value, subtract) { // 设置 值
        var matches = rnumsplit.exec(value);
        return matches ? Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || "px") : value; // 最小值 0
    }

    function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {  // 是否添加 border padding margin 等值
        var i = extra === (isBorderBox ? "border" : "content") ? 4 : name === "width" ? 1 : 0,
            val = 0; // 1 3 与 宽有关， 0 2 与高有关
        for (; i < 4; i += 2) {
            if (extra === "margin") {
                val += jQuery.css(elem, extra + cssExpand[i], true, styles);
            }
            if (isBorderBox) {
                if (extra === "content") {
                    val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
                }
                if (extra !== "margin") {
                    val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
                }
            } else {
                val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);
                if (extra !== "padding") {
                    val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
                }
            }
        }
        return val;
    }

    function getWidthOrHeight(elem, name, extra) { // 获取到宽或者高
        var valueIsBorderBox = true,
            val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
            styles = getStyles(elem),
            isBorderBox = jQuery.support.boxSizing && jQuery.css(elem, "boxSizing", false, styles) === "border-box";
        if (val <= 0 || val == null) {
            val = curCSS(elem, name, styles);
            if (val < 0 || val == null) {
                val = elem.style[name];
            }
            if (rnumnonpx.test(val)) {
                return val;
            }
            valueIsBorderBox = isBorderBox && (jQuery.support.boxSizingReliable || val === elem.style[name]);
            val = parseFloat(val) || 0;
        }
        return (val +
            augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox,
                styles)) + "px";  // val 获取之后，根据判断计算是否加一些值或者减一些值
    }

    function css_defaultDisplay(nodeName) { // 获取默认 display 样式
        var doc = document,
            display = elemdisplay[nodeName]; // 默认 BODY 是 block
        if (!display) {
            display = actualDisplay(nodeName, doc); // 获取 nodeName 的 默认 display 属性
            if (display === "none" || !display) { // 针对 iframe 来进行兼容处理 ： 只要 iframe 是隐藏的，那么 iframe 里面的元素获取的 display 也会是 none, 所以要进行相应的处理
                iframe = (iframe || jQuery("<iframe frameborder='0' width='0' height='0'/>").css("cssText",
                    "display:block !important")).appendTo(doc.documentElement);
                doc = (iframe[0].contentWindow || iframe[0].contentDocument).document;
                doc.write("<!doctype html><html><body>");
                doc.close();
                display = actualDisplay(nodeName, doc);
                iframe.detach();
            }
            elemdisplay[nodeName] = display;
        }
        return display;
    }

    function actualDisplay(name, doc) { // 获取 display 
        var elem = jQuery(doc.createElement(name)).appendTo(doc.body),
            display = jQuery.css(elem[0], "display"); // 动态创建标签，然后获取默认的 display 属性
        elem.remove();
        return display;
    }
    jQuery.each(["height", "width"], function (i, name) { // 获取尺寸，给 6092 左右行数进行调用，
        jQuery.cssHooks[name] = {
            get: function (elem, computed, extra) { // 获取
                if (computed) {
                    return elem.offsetWidth === 0 && rdisplayswap.test(jQuery.css(elem, "display")) ?
                        jQuery.swap(elem, cssShow, function () { // 针对隐藏元素，把元素显示出来，然后进行获取
                            return getWidthOrHeight(elem, name, extra);
                        }) : getWidthOrHeight(elem, name, extra);  // 获取到宽或者高
                }
            },
            set: function (elem, value, extra) { // 设置
                var styles = extra && getStyles(elem);
                return setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name,
                    extra, jQuery.support.boxSizing && jQuery.css(elem, "boxSizing", false,
                        styles) === "border-box", styles) : 0);
            }
        };
    });
    jQuery(function () {  // 兼容性处理-样式设置，
        if (!jQuery.support.reliableMarginRight) { // for Andriod 2.3
            jQuery.cssHooks.marginRight = {
                get: function (elem, computed) {
                    if (computed) {
                        return jQuery.swap(elem, {
                            "display": "inline-block"
                        }, curCSS, [elem, "marginRight"]);
                    }
                }
            };
        }
        if (!jQuery.support.pixelPosition && jQuery.fn.position) { // 定位问题
            jQuery.each(["top", "left"], function (i, prop) {
                jQuery.cssHooks[prop] = {
                    get: function (elem, computed) {
                        if (computed) {
                            computed = curCSS(elem, prop);
                            return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] +
                                "px" : computed;
                        }
                    }
                };
            });
        }
    });
    if (jQuery.expr && jQuery.expr.filters) { // 针对隐藏和显示元素的获取， $('#div:visible') | $('#div:hidden')
        jQuery.expr.filters.hidden = function (elem) {
            return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
        };
        jQuery.expr.filters.visible = function (elem) {
            return !jQuery.expr.filters.hidden(elem);
        };
    }
    jQuery.each({ // $('div').animate({ margin: '10px 20px 30px 40px' })  将其对应到对应的 marginLeft marginRight marginTop marginBottom
        margin: "",
        padding: "",
        border: "Width"
    }, function (prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {
            expand: function (value) {
                var i = 0,
                    expanded = {},
                    parts = typeof value === "string" ? value.split(" ") : [value];
                for (; i < 4; i++) {
                    expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
                }
                return expanded;
            }
        };
        if (!rmargin.test(prefix)) {
            jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
        }
    });
    // ajax 相关操作
    var r20 = /%20/g,
        rbracket = /\[\]$/,
        rCRLF = /\r?\n/g,
        rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
        rsubmittable = /^(?:input|select|textarea|keygen)/i;
    jQuery.fn.extend({ // 两个实例方法
        serialize: function () {  // 序列化 form 表单的数据
            return jQuery.param(this.serializeArray());
        },
        serializeArray: function () {
            return this.map(function () {
                var elements = jQuery.prop(this, "elements"); // 只有 form 元素才有 elements 属性
                return elements ? jQuery.makeArray(elements) : this; // 转数组的操作；如果没有，就返回自身
            }).filter(function () { // 过滤掉不用获取的
                var type = this.type;
                return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) &&
                    !rsubmitterTypes.test(type) && (this.checked || !
                        manipulation_rcheckableType.test(type)); // disabled  rsubmittable 中匹配的 submit|button|...  单选框或者复选框
            }).map(function (i, elem) {
                var val = jQuery(this).val();
                return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function (val) {
                    return {
                        name: elem.name,
                        value: val.replace(rCRLF, "\r\n")
                    };
                }) : {
                    name: elem.name,
                    value: val.replace(rCRLF, "\r\n")  // 换行替换
                };
            }).get();
        }
    });
    // 工具方法 ： 把 json 或者 数组对象【可以处理表单信息】  序列化成 字符串，后续可以用字符串进行一些操作了
    jQuery.param = function (a, traditional) {
        var prefix, s = [],
            add = function (key, value) {
                value = jQuery.isFunction(value) ? value() : (value == null ? "" : value);
                s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
            };
        if (traditional === undefined) { // 兼容性
            traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
        }
        if (jQuery.isArray(a) || (a.jquery && !jQuery.isPlainObject(a))) {
            jQuery.each(a, function () {  // 数组形式，将 name 和 value 组装
                add(this.name, this.value);
            });
        } else {
            for (prefix in a) { // 普通形式
                buildParams(prefix, a[prefix], traditional, add);
            }
        }
        return s.join("&").replace(r20, "+"); // r20 是空格，替换成 + ; 
    };
    function buildParams(prefix, obj, traditional, add) { // 进行分支处理
        var name;
        if (jQuery.isArray(obj)) {
            jQuery.each(obj, function (i, v) {
                if (traditional || rbracket.test(prefix)) {
                    add(prefix, v);
                } else {
                    buildParams(prefix + "[" + (typeof v === "object" ? i : "") + "]", v, traditional, add);
                }
            });
        } else if (!traditional && jQuery.type(obj) === "object") { // 非数组，jquery 对象也可以走
            for (name in obj) {
                buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
            }
        } else {
            add(prefix, obj);
        }
    }
    jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " +
        "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
        "change select submit keydown keypress keyup error contextmenu").split(" "), function (i, name) {
            jQuery.fn[name] = function (data, fn) {
                return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
            };
        }); // 事件函数 ， 与  3021 jQuery.event  的这个一起查看，主要调用 add  remove trigger
    jQuery.fn.extend({  // 主要调用 on off trigger
        hover: function (fnOver, fnOut) {
            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        },
        bind: function (types, data, fn) {
            return this.on(types, null, data, fn);
        },
        unbind: function (types, fn) {
            return this.off(types, null, fn);
        },
        delegate: function (selector, types, data, fn) {
            return this.on(types, selector, data, fn);
        },
        undelegate: function (selector, types, fn) {
            return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**",
                fn);
        }
    });
    // ajax 具体方法在下面
    var
        ajaxLocParts, ajaxLocation, ajax_nonce = jQuery.now(),
        ajax_rquery = /\?/,
        rhash = /#.*$/,
        rts = /([?&])_=[^&]*/,
        rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
        rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,  // 用来判断是否是本地的 ajax 请求
        rnoContent = /^(?:GET|HEAD)$/,
        rprotocol = /^\/\//,
        rurl = /^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,
        _load = jQuery.fn.load,
        prefilters = {},  // ajax 之前做的预处理过滤器，设置之后类似如下 { 'jsonp': function(){} }
        transports = {},  // ajax 当中的一个具体的回调，分发处理器，设置之后类似如下 { 'jsonp': function(){} }
        allTypes = "*/".concat("*"); // 用 concat 是防止在代码压缩时出现 bug
    try {
        ajaxLocation = location.href;
    } catch (e) {
        ajaxLocation = document.createElement("a");
        ajaxLocation.href = "";
        ajaxLocation = ajaxLocation.href;
    }
    ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || []; // 转换 url 为规定格式

    function addToPrefiltersOrTransports(structure) { // 添加进去对应的回调，利用函数柯里化形式
        return function (dataTypeExpression, func) {
            if (typeof dataTypeExpression !== "string") { // 判断是否存在，默认设置 '*', 所有的都适用
                func = dataTypeExpression;
                dataTypeExpression = "*";
            }
            var dataType, i = 0,
                dataTypes = dataTypeExpression.toLowerCase().match(core_rnotwhite) || [];
            if (jQuery.isFunction(func)) {
                while ((dataType = dataTypes[i++])) {
                    if (dataType[0] === "+") { // 针对多回调的情况下，如果是 + , 放到前面， 反之放到后面
                        dataType = dataType.slice(1) || "*";
                        (structure[dataType] = structure[dataType] || []).unshift(func);
                    } else {
                        (structure[dataType] = structure[dataType] || []).push(func);
                    }
                }
            }
        };
    }

    function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
        var inspected = {},
            seekingTransport = (structure === transports);

        function inspect(dataType) {
            var selected;
            inspected[dataType] = true; // 根据对应的 dataType 进行循环触发回调
            jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
                var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);  // prefilterOrFactory 就是对应的回调函数, 是下面的 jQuery.ajaxPrefilter 和 jQuery.ajaxTransport
                if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[
                    dataTypeOrTransport]) {
                    options.dataTypes.unshift(dataTypeOrTransport);
                    inspect(dataTypeOrTransport); // 如果是 json jsonp 还会再根据 返回值 script 调用一遍 jQuery.ajaxTransport 中的 script 
                    return false;
                } else if (seekingTransport) {
                    return !(selected = dataTypeOrTransport); // 跨域与否，这里看 p#5265 行可见其没跨越是没有返回值，这里就是返回 true
                }
            });
            return selected;
        }
        return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*"); // 返回值影响操作，没跨域时候触发 inspect("*")，就是调用普通的形式
    }

    function ajaxExtend(target, src) { // fixed 深度拷贝、循环引用的 Bug, 可能会引发内存泄漏
        var key, deep, flatOptions = jQuery.ajaxSettings.flatOptions || {}; // 通过配置对一些属性不进行深拷贝处理
        for (key in src) {
            if (src[key] !== undefined) {
                (flatOptions[key] ? target : (deep || (deep = {})))[key] = src[key];
            }
        }
        if (deep) { // 拷贝
            jQuery.extend(true, target, deep);
        }
        return target;
    }
    jQuery.fn.load = function (url, params, callback) {
        if (typeof url !== "string" && _load) { // 区分 load 操作
            return _load.apply(this, arguments);
        }
        var selector, type, response, self = this,
            off = url.indexOf(" ");
        if (off >= 0) {
            selector = url.slice(off);
            url = url.slice(0, off);
        }
        if (jQuery.isFunction(params)) { // 当第二个参数是函数时
            callback = params;
            params = undefined;
        } else if (params && typeof params === "object") {
            type = "POST";
        }
        if (self.length > 0) { // 调用 $.ajax, 
            jQuery.ajax({
                url: url,
                type: type,
                dataType: "html",
                data: params
            }).done(function (responseText) {
                response = arguments;
                self.html(selector ? jQuery("<div>").append(jQuery.parseHTML(responseText)).find(
                    selector) : responseText);
            }).complete(callback && function (jqXHR, status) {
                self.each(callback, response || [jqXHR.responseText, status, jqXHR]);
            });
        }
        return this;
    };
    // ajax 设置全局事件
    jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (i,
        type) { // 全局事件：开始前触发，执行之后触发，完成之后触发，出错后触发，成功后触发，发送后触发
        jQuery.fn[type] = function (fn) {
            return this.on(type, fn);
        };
    });
    jQuery.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: { // 默认配置 options
            url: ajaxLocation, // 当前页面地址 location.href  p#4735
            type: "GET",
            isLocal: rlocalProtocol.test(ajaxLocParts[1]), // 判断是否是本地的 ajax
            global: true, // 是否能触发全局事件
            processData: true, // 发送的数据是否进行串联化'&'处理
            async: true, // 是否异步，默认是异步
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",  // 数据编码的操作，默认是字符串
            accepts: { // 请求头中的信息，对应上面默认变量 allTypes
                "*": allTypes,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },
            contents: { // 用来检测 响应头信息中的 Content-Type, 是服务器设置的
                xml: /xml/,
                html: /html/,
                json: /json/
            },
            responseFields: { // 响应的数据可能
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON"
            },
            converters: { // 对数据根据其 Content-Type 进行响应的转换
                "* text": String,
                "text html": true,
                "text json": jQuery.parseJSON,
                "text xml": jQuery.parseXML
            },
            flatOptions: { // 对 url 和 context 不进行深拷贝的处理
                url: true,
                context: true
            }/** 还有一些参数可以自行配置
                timeout: 0, data: null, dataType: null, username: null, password: null, cache: null, throws: false, traditional: false, headers: {},
            */
        },
        ajaxSetup: function (target, settings) { // 将配置参数覆盖默认参数 -> 合并配置
            return settings ? ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :
                ajaxExtend(jQuery.ajaxSettings, target); // 如果 settings 没有，合并到了 jQuery.ajaxSettings 上，如果 settings 有值，则合并到一个新的 对象里面
        },
        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),
        ajax: function (url, options) { // jQuery.ajax, 可以接受两个参数 
            if (typeof url === "object") {  // 判断 url 是不是 options , 即 是否只传了一个参数
                options = url;
                url = undefined;
            }
            options = options || {}; // 配置参数
            var transport, cacheURL, responseHeadersString, responseHeaders, timeoutTimer, parts,
                fireGlobals, i, s = jQuery.ajaxSetup({}, options), // 配置参数合并
                callbackContext = s.context || s, // 合并之后的 context, 相当于请求中的 this , 可以在 options.context 进行指定
                globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ?
                    jQuery(callbackContext) : jQuery.event, // jQuery.event ： ajax 全局事件， 根据 context 进行设置
                deferred = jQuery.Deferred(), // 延迟对象
                completeDeferred = jQuery.Callbacks("once memory"),  // 触发一次的回调对象
                statusCode = s.statusCode || {}, // 状态码
                requestHeaders = {},
                requestHeadersNames = {},
                state = 0,
                strAbort = "canceled",
                jqXHR = { // 模拟出来的 XHR
                    readyState: 0, // 状态
                    getResponseHeader: function (key) { // 通过 key 获取对象响应的头信息 
                        var match;
                        if (state === 2) {
                            if (!responseHeaders) {
                                responseHeaders = {};
                                while ((match = rheaders.exec(responseHeadersString))) {
                                    responseHeaders[match[1].toLowerCase()] = match[2];
                                }
                            }
                            match = responseHeaders[key.toLowerCase()];
                        }
                        return match == null ? null : match;
                    },
                    getAllResponseHeaders: function () {
                        return state === 2 ? responseHeadersString : null;
                    },
                    setRequestHeader: function (name, value) { // 设置请求头
                        var lname = name.toLowerCase();
                        if (!state) {
                            name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
                            requestHeaders[name] = value;
                        }
                        return this;
                    },
                    overrideMimeType: function (type) { // 设置 mimeType
                        if (!state) {
                            s.mimeType = type;
                        }
                        return this;
                    },
                    statusCode: function (map) {
                        var code;
                        if (map) {
                            if (state < 2) {
                                for (code in map) {
                                    statusCode[code] = [statusCode[code], map[code]];
                                }
                            } else {
                                jqXHR.always(map[jqXHR.status]);
                            }
                        }
                        return this;
                    },
                    abort: function (statusText) { // 超时终止
                        var finalText = statusText || strAbort;
                        if (transport) {
                            transport.abort(finalText);
                        }
                        done(0, finalText);
                        return this;
                    }
                };
            deferred.promise(jqXHR).complete = completeDeferred.add; // 将延迟对象中的方法融入到 jqXHR 当中， 也可以进行链式调用了
            jqXHR.success = jqXHR.done;
            jqXHR.error = jqXHR.fail;
            s.url = ((url || s.url || ajaxLocation) + "").replace(rhash, "").replace(rprotocol,
                ajaxLocParts[1] + "//"); // 将 hash 值设置成 空，兼容 // 开头的 url
            s.type = options.method || options.type || s.method || s.type; // type 设置
            s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(core_rnotwhite) || [""]; // 配置 dataType
            if (s.crossDomain == null) { // 判断是否是跨域处理
                parts = rurl.exec(s.url.toLowerCase());
                s.crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[
                    2] || (parts[3] || (parts[1] === "http:" ? "80" : "443")) !== (
                        ajaxLocParts[3] || (ajaxLocParts[1] === "http:" ? "80" : "443"))));
            }
            if (s.data && s.processData && typeof s.data !== "string") {
                s.data = jQuery.param(s.data, s.traditional);
            }
            inspectPrefiltersOrTransports(prefilters, s, options, jqXHR); // 触发回调函数，预处理过滤器。 ###!important 这里比较困难
            if (state === 2) {// 请求已经完成
                return jqXHR;
            }
            fireGlobals = s.global;
            if (fireGlobals && jQuery.active++ === 0) {
                jQuery.event.trigger("ajaxStart"); // 触发开始事件
            }
            s.type = s.type.toUpperCase();
            s.hasContent = !rnoContent.test(s.type); // GET / HEAD 方式
            cacheURL = s.url;
            if (!s.hasContent) { // 判断有没有内容
                if (s.data) {
                    cacheURL = (s.url += (ajax_rquery.test(cacheURL) ? "&" : "?") + s.data);
                    delete s.data;
                }
                if (s.cache === false) { // 不需要缓存
                    s.url = rts.test(cacheURL) ? cacheURL.replace(rts, "$1_=" + ajax_nonce++) :
                        cacheURL + (ajax_rquery.test(cacheURL) ? "&" : "?") + "_=" + ajax_nonce++;
                }
            }
            if (s.ifModified) { // 设置头信息，这里可以看 http协议；
                if (jQuery.lastModified[cacheURL]) { // 如果数据没有改变，就利用上次缓存的请求数据
                    jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
                }
                if (jQuery.etag[cacheURL]) { // 一种常用的判断资源是否改变的方法
                    jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
                }
            }
            if (s.data && s.hasContent && s.contentType !== false || options.contentType) { // 设置 Content-Type
                jqXHR.setRequestHeader("Content-Type", s.contentType);
            }
            jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[
                0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts[
            "*"]); // 设置 Accept
            for (i in s.headers) { // 设置头信息
                jqXHR.setRequestHeader(i, s.headers[i]);
            }
            if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {
                return jqXHR.abort();
            }
            strAbort = "abort";
            for (i in {
                success: 1,
                error: 1,
                complete: 1
            }) {
                jqXHR[i](s[i]);
            }
            transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR); // 触发回调函数，分发处理器
            if (!transport) {
                done(-1, "No Transport");
            } else {
                jqXHR.readyState = 1;
                if (fireGlobals) {
                    globalEventContext.trigger("ajaxSend", [jqXHR, s]);
                }
                if (s.async && s.timeout > 0) { // 判断延迟，是否中断
                    timeoutTimer = setTimeout(function () {
                        jqXHR.abort("timeout");
                    }, s.timeout);
                }
                try {
                    state = 1;
                    transport.send(requestHeaders, done);
                } catch (e) {
                    if (state < 2) {
                        done(-1, e);
                    } else {
                        throw e;
                    }
                }
            }

            function done(status, nativeStatusText, responses, headers) {
                var isSuccess, success, error, response, modified, statusText = nativeStatusText;
                if (state === 2) {
                    return;
                }
                state = 2;
                if (timeoutTimer) {
                    clearTimeout(timeoutTimer);
                }
                transport = undefined;
                responseHeadersString = headers || "";
                jqXHR.readyState = status > 0 ? 4 : 0;
                isSuccess = status >= 200 && status < 300 || status === 304;
                if (responses) { // 获取响应数据
                    response = ajaxHandleResponses(s, jqXHR, responses);
                }
                response = ajaxConvert(s, response, jqXHR, isSuccess); // 转换响应函数
                if (isSuccess) {
                    if (s.ifModified) {
                        modified = jqXHR.getResponseHeader("Last-Modified");
                        if (modified) {
                            jQuery.lastModified[cacheURL] = modified;
                        }
                        modified = jqXHR.getResponseHeader("etag");
                        if (modified) {
                            jQuery.etag[cacheURL] = modified;
                        }
                    }
                    if (status === 204 || s.type === "HEAD") {
                        statusText = "nocontent";
                    } else if (status === 304) {
                        statusText = "notmodified";
                    } else {
                        statusText = response.state;
                        success = response.data;
                        error = response.error;
                        isSuccess = !error;
                    }
                } else {
                    error = statusText;
                    if (status || !statusText) {
                        statusText = "error";
                        if (status < 0) {
                            status = 0;
                        }
                    }
                }
                jqXHR.status = status;
                jqXHR.statusText = (nativeStatusText || statusText) + "";
                if (isSuccess) { // 成功或者失败的回调触发
                    deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
                } else {
                    deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
                }
                jqXHR.statusCode(statusCode); // 成功或者失败之后
                statusCode = undefined;
                if (fireGlobals) { // 触发全局的 ajax 事件
                    globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s,
                        isSuccess ? success : error]);
                }
                completeDeferred.fireWith(callbackContext, [jqXHR, statusText]); // 触发完成事件
                if (fireGlobals) {
                    globalEventContext.trigger("ajaxComplete", [jqXHR, s]); // 触发全局的 ajax 完成事件
                    if (!(--jQuery.active)) {
                        jQuery.event.trigger("ajaxStop"); // 触发全局的 ajax 停止
                    }
                }
            }
            return jqXHR;
        },
        getJSON: function (url, data, callback) {
            return jQuery.get(url, data, callback, "json"); // 限制死了, 返回类型 json 
        },
        getScript: function (url, callback) {
            return jQuery.get(url, undefined, callback, "script"); // 没有传参，限制死了, 返回类型 script 
        }
    });
    jQuery.each(["get", "post"], function (i, method) { // $.get  $.post 
        jQuery[method] = function (url, data, callback, type) {
            if (jQuery.isFunction(data)) {
                type = type || callback;
                callback = data;
                data = undefined;
            }
            return jQuery.ajax({
                url: url,
                type: method,
                dataType: type,
                data: data,
                success: callback
            });
        };
    });

    function ajaxHandleResponses(s, jqXHR, responses) { // 处理响应
        var ct, type, finalDataType, firstDataType, contents = s.contents,
            dataTypes = s.dataTypes;
        while (dataTypes[0] === "*") {
            dataTypes.shift();
            if (ct === undefined) {
                ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
            }
        }
        if (ct) {
            for (type in contents) {
                if (contents[type] && contents[type].test(ct)) {
                    dataTypes.unshift(type);
                    break;
                }
            }
        }
        if (dataTypes[0] in responses) {
            finalDataType = dataTypes[0];
        } else {
            for (type in responses) {
                if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
                    finalDataType = type;
                    break;
                }
                if (!firstDataType) {
                    firstDataType = type;
                }
            }
            finalDataType = finalDataType || firstDataType;
        }
        if (finalDataType) {
            if (finalDataType !== dataTypes[0]) {
                dataTypes.unshift(finalDataType);
            }
            return responses[finalDataType];
        }
    }

    function ajaxConvert(s, response, jqXHR, isSuccess) { // 转换数据
        var conv2, current, conv, tmp, prev, converters = {},
            dataTypes = s.dataTypes.slice();
        if (dataTypes[1]) {
            for (conv in s.converters) {
                converters[conv.toLowerCase()] = s.converters[conv];
            }
        }
        current = dataTypes.shift();
        while (current) {
            if (s.responseFields[current]) {
                jqXHR[s.responseFields[current]] = response;
            }
            if (!prev && isSuccess && s.dataFilter) {
                response = s.dataFilter(response, s.dataType);
            }
            prev = current;
            current = dataTypes.shift();
            if (current) {
                if (current === "*") {
                    current = prev;
                } else if (prev !== "*" && prev !== current) {
                    conv = converters[prev + " " + current] || converters["* " + current];
                    if (!conv) {
                        for (conv2 in converters) {
                            tmp = conv2.split(" ");
                            if (tmp[1] === current) {
                                conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
                                if (conv) {
                                    if (conv === true) {
                                        conv = converters[conv2];
                                    } else if (converters[conv2] !== true) {
                                        current = tmp[0];
                                        dataTypes.unshift(tmp[1]);
                                    }
                                    break;
                                }
                            }
                        }
                    }
                    if (conv !== true) {
                        if (conv && s["throws"]) {
                            response = conv(response);
                        } else {
                            try {
                                response = conv(response);
                            } catch (e) {
                                return {
                                    state: "parsererror",
                                    error: conv ? e : "No conversion from " + prev + " to " + current
                                };
                            }
                        }
                    }
                }
            }
        }
        return {
            state: "success",
            data: response
        };
    }
    jQuery.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /(?:java|ecma)script/
        },
        converters: {
            "text script": function (text) {
                jQuery.globalEval(text);
                return text;
            }
        }
    });
    jQuery.ajaxPrefilter("script", function (s) { // 预处理的方法
        if (s.cache === undefined) { // script 时候不要缓存
            s.cache = false;
        }
        if (s.crossDomain) { // 跨域情况是 GET 请求类型
            s.type = "GET";
        }
    });
    jQuery.ajaxTransport("script", function (s) { // 分发处理的方法，函数柯里化
        if (s.crossDomain) { // 跨域的时候，没有跨越的时候是没有 return 返回值
            var script, callback;
            return {
                send: function (_, complete) {
                    script = jQuery("<script>").prop({ // 动态创建 script 形式
                        async: true,
                        charset: s.scriptCharset,
                        src: s.url
                    }).on("load error", callback = function (evt) {
                        script.remove();
                        callback = null;
                        if (evt) {
                            complete(evt.type === "error" ? 404 : 200, evt.type);
                        }
                    });
                    document.head.appendChild(script[0]);
                },
                abort: function () {
                    if (callback) {
                        callback();
                    }
                }
            };
        }
    });
    var oldCallbacks = [],
        rjsonp = /(=)\?(?=&|$)|\?\?/;
    jQuery.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function () { // 随机生成 1 个变量名, 返回出 回调
            var callback = oldCallbacks.pop() || (jQuery.expando + "_" + (ajax_nonce++));
            this[callback] = true;
            return callback;
        }
    });
    jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {
        var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ?
            "url" : typeof s.data === "string" && !(s.contentType || "").indexOf(
                "application/x-www-form-urlencoded") && rjsonp.test(s.data) && "data");
        if (jsonProp || s.dataTypes[0] === "jsonp") { // 如果有 jsonpCallback，执行 jsonpCallback，就是 p#5295 行的 jsonpCallback
            callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
            if (jsonProp) {
                s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
            } else if (s.jsonp !== false) {
                s.url += (ajax_rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
            }
            s.converters["script json"] = function () {
                if (!responseContainer) {
                    jQuery.error(callbackName + " was not called");
                }
                return responseContainer[0]; // 返回 jsonp 当中的数据
            };
            s.dataTypes[0] = "json";
            overwritten = window[callbackName];
            window[callbackName] = function () { // 新建一个回调，获取正真的数据
                responseContainer = arguments;
            };
            jqXHR.always(function () {
                window[callbackName] = overwritten;
                if (s[callbackName]) {
                    s.jsonpCallback = originalSettings.jsonpCallback;
                    oldCallbacks.push(callbackName);
                }
                if (responseContainer && jQuery.isFunction(overwritten)) {
                    overwritten(responseContainer[0]);
                }
                responseContainer = overwritten = undefined;
            });
            return "script"; // 再转到 script 那里进行处理
        }
    });
    jQuery.ajaxSettings.xhr = function () {
        try {
            return new XMLHttpRequest();
        } catch (e) { }
    };
    var xhrSupported = jQuery.ajaxSettings.xhr(),
        xhrSuccessStatus = {
            0: 200,
            1223: 204
        },
        xhrId = 0,
        xhrCallbacks = {};
    if (window.ActiveXObject) {
        jQuery(window).on("unload", function () {
            for (var key in xhrCallbacks) {
                xhrCallbacks[key]();
            }
            xhrCallbacks = undefined;
        });
    }
    jQuery.support.cors = !!xhrSupported && ("withCredentials" in xhrSupported);
    jQuery.support.ajax = xhrSupported = !!xhrSupported;
    jQuery.ajaxTransport(function (options) { // 分发处理普通形式
        var callback;
        if (jQuery.support.cors || xhrSupported && !options.crossDomain) { // 非跨域情况下
            return {
                send: function (headers, complete) {
                    var i, id, xhr = options.xhr(); // 调用原生的 xhr, 在上面 jQuery.ajaxSettings.xhr 这里设置。
                    xhr.open(options.type, options.url, options.async, options.username, options.password); // 需要username password 进行身份验证，原生操作 open 
                    if (options.xhrFields) {
                        for (i in options.xhrFields) {
                            xhr[i] = options.xhrFields[i];
                        }
                    }
                    if (options.mimeType && xhr.overrideMimeType) {
                        xhr.overrideMimeType(options.mimeType);
                    }
                    if (!options.crossDomain && !headers["X-Requested-With"]) {
                        headers["X-Requested-With"] = "XMLHttpRequest";
                    }
                    for (i in headers) {
                        xhr.setRequestHeader(i, headers[i]);
                    }
                    callback = function (type) {
                        return function () {
                            if (callback) {
                                delete xhrCallbacks[id];
                                callback = xhr.onload = xhr.onerror = null;
                                if (type === "abort") {
                                    xhr.abort();
                                } else if (type === "error") {
                                    complete(xhr.status || 404, xhr.statusText);
                                } else {
                                    complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText,
                                        typeof xhr.responseText === "string" ? {
                                            text: xhr.responseText
                                        } : undefined, xhr.getAllResponseHeaders());
                                }
                            }
                        };
                    };
                    xhr.onload = callback(); // 利用 标准的 onload 方法，没有用 onreadystartchange 
                    xhr.onerror = callback("error");
                    callback = xhrCallbacks[(id = xhrId++)] = callback("abort");
                    xhr.send(options.hasContent && options.data || null);
                },
                abort: function () {
                    if (callback) {
                        callback();
                    }
                }
            };
        }
    });
    // animate() 动画相关操作
    var fxNow, timerId, rfxtypes = /^(?:toggle|show|hide)$/,
        rfxnum = new RegExp("^(?:([+-])=|)(" + core_pnum + ")([a-z%]*)$", "i"),
        rrun = /queueHooks$/,
        animationPrefilters = [defaultPrefilter],
        tweeners = { // 处理单位混用问题，单位转换
            "*": [function (prop, value) {
                var tween = this.createTween(prop, value), // p#5501
                    target = tween.cur(),
                    parts = rfxnum.exec(value),
                    unit = parts && parts[3] || (jQuery.cssNumber[prop] ? "" : "px"), // 设置对应单位
                    start = (jQuery.cssNumber[prop] || unit !== "px" && +target) && rfxnum.exec(jQuery.css(
                        tween.elem, prop)),
                    scale = 1,
                    maxIterations = 20;
                if (start && start[3] !== unit) { // 单位不相等的情况下
                    unit = unit || start[3];
                    parts = parts || [];
                    start = +target || 1;
                    do {
                        scale = scale || ".5"; // 刻度比
                        start = start / scale;
                        jQuery.style(tween.elem, prop, start + unit); // 设置
                    } while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations);
                }
                if (parts) { // 对运算的目标值的操作
                    start = tween.start = +start || +target || 0;
                    tween.unit = unit;
                    tween.end = parts[1] ? start + (parts[1] + 1) * parts[2] : +parts[2];
                }
                return tween;
            }]
        };

    function createFxNow() {
        setTimeout(function () {
            fxNow = undefined;
        });
        return (fxNow = jQuery.now());
    }

    function createTween(value, prop, animation) {
        var tween, collection = (tweeners[prop] || []).concat(tweeners["*"]), // 利用 tweeners 
            index = 0,
            length = collection.length;
        for (; index < length; index++) {
            if ((tween = collection[index].call(animation, prop, value))) {
                return tween;
            }
        }
    }

    function Animation(elem, properties, options) { // 元素 属性 参数配置
        var result, stopped, index = 0,
            length = animationPrefilters.length,
            deferred = jQuery.Deferred().always(function () {
                delete tick.elem;
            }), // 引入延迟对象进行异步管理
            tick = function () { // 在运动当中，不断的调用定时器的操作
                if (stopped) {
                    return false;
                }
                var currentTime = fxNow || createFxNow(),
                    remaining = Math.max(0, animation.startTime + animation.duration - currentTime),
                    temp = remaining / animation.duration || 0,
                    percent = 1 - temp, // 0 - 1的变换的比例 
                    index = 0,
                    length = animation.tweens.length;
                for (; index < length; index++) {
                    animation.tweens[index].run(percent);
                }
                deferred.notifyWith(elem, [animation, percent, remaining]); // 传参
                if (percent < 1 && length) {
                    return remaining;
                } else {
                    deferred.resolveWith(elem, [animation]);
                    return false; // 当前运动结束时
                }
            },
            animation = deferred.promise({ // 贯穿整个运动中的延迟对象，其中存储了很多的方法
                elem: elem,
                props: jQuery.extend({}, properties),
                opts: jQuery.extend(true, {
                    specialEasing: {}
                }, options),
                originalProperties: properties,
                originalOptions: options,
                startTime: fxNow || createFxNow(),
                duration: options.duration,
                tweens: [],
                createTween: function (prop, end) {
                    var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[
                        prop] || animation.opts.easing);
                    animation.tweens.push(tween);
                    return tween; // 
                },
                stop: function (gotoEnd) {
                    var index = 0,
                        length = gotoEnd ? animation.tweens.length : 0;
                    if (stopped) {
                        return this;
                    }
                    stopped = true;
                    for (; index < length; index++) {
                        animation.tweens[index].run(1);
                    }
                    if (gotoEnd) {
                        deferred.resolveWith(elem, [animation, gotoEnd]);
                    } else {
                        deferred.rejectWith(elem, [animation, gotoEnd]);
                    }
                    return this;
                }
            }),
            props = animation.props;
        propFilter(props, animation.opts.specialEasing);
        for (; index < length; index++) { // 执行 defaultPrefilter
            result = animationPrefilters[index].call(animation, elem, props, animation.opts);
            if (result) {
                return result;
            }
        }
        jQuery.map(props, createTween, animation); // 设置 props, 调用 tweeners
        if (jQuery.isFunction(animation.opts.start)) {
            animation.opts.start.call(elem, animation);
        }
        jQuery.fx.timer(jQuery.extend(tick, { // 直接进行添加
            elem: elem,
            anim: animation,
            queue: animation.opts.queue
        }));
        return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(
            animation.opts.fail).always(animation.opts.always);
    }

    function propFilter(props, specialEasing) { // 重新分配
        var index, name, easing, value, hooks;
        for (index in props) {
            name = jQuery.camelCase(index); // 转驼峰的操作
            easing = specialEasing[name];  // 运动动画
            value = props[index];
            if (jQuery.isArray(value)) { // 指定数组进行拆解
                easing = value[1];
                value = props[index] = value[0];
            }
            if (index !== name) {
                props[name] = value;
                delete props[index];
            }
            hooks = jQuery.cssHooks[name];
            if (hooks && "expand" in hooks) {  // 针对复合样式的处理
                value = hooks.expand(value);
                delete props[name];
                for (index in value) {
                    if (!(index in props)) {
                        props[index] = value[index];
                        specialEasing[index] = easing;
                    }
                }
            } else {
                specialEasing[name] = easing;
            }
        }
    }
    jQuery.Animation = jQuery.extend(Animation, {
        tweener: function (props, callback) {
            if (jQuery.isFunction(props)) {
                callback = props;
                props = ["*"];
            } else {
                props = props.split(" ");
            }
            var prop, index = 0,
                length = props.length;
            for (; index < length; index++) {
                prop = props[index];
                tweeners[prop] = tweeners[prop] || [];
                tweeners[prop].unshift(callback);
            }
        },
        prefilter: function (callback, prepend) {
            if (prepend) {
                animationPrefilters.unshift(callback);
            } else {
                animationPrefilters.push(callback);
            }
        }
    });

    function defaultPrefilter(elem, props, opts) {
        var prop, value, toggle, tween, hooks, oldfire, anim = this,
            orig = {},
            style = elem.style,
            hidden = elem.nodeType && isHidden(elem),
            dataShow = data_priv.get(elem, "fxshow");
        if (!opts.queue) {
            hooks = jQuery._queueHooks(elem, "fx"); // 先让前面入队的保持状态， 与配置 queue: false | 'fx' 有关
            if (hooks.unqueued == null) {
                hooks.unqueued = 0;
                oldfire = hooks.empty.fire;
                hooks.empty.fire = function () {
                    if (!hooks.unqueued) { // 为 0 时触发
                        oldfire();
                    }
                };
            }
            hooks.unqueued++;
            anim.always(function () {
                anim.always(function () { // 减完之后同时触发
                    hooks.unqueued--;  // 减到零会触发  oldfire()
                    if (!jQuery.queue(elem, "fx").length) {
                        hooks.empty.fire();
                    }
                });
            });
        }
        if (elem.nodeType === 1 && ("height" in props || "width" in props)) {  // 元素类型，可能是高或者宽
            opts.overflow = [style.overflow, style.overflowX, style.overflowY]; // 设置 overflow: hidden
            if (jQuery.css(elem, "display") === "inline" && jQuery.css(elem, "float") === "none") {
                style.display = "inline-block";
            }
        }
        if (opts.overflow) {
            style.overflow = "hidden";
            anim.always(function () {
                style.overflow = opts.overflow[0];
                style.overflowX = opts.overflow[1];
                style.overflowY = opts.overflow[2];
            });
        }
        for (prop in props) { // show | hide 操作
            value = props[prop];
            if (rfxtypes.exec(value)) {
                delete props[prop];
                toggle = toggle || value === "toggle";
                if (value === (hidden ? "hide" : "show")) {
                    if (value === "show" && dataShow && dataShow[prop] !== undefined) {
                        hidden = true;
                    } else {
                        continue;
                    }
                }
                orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
            }
        } // 结束 overflow
        if (!jQuery.isEmptyObject(orig)) {
            if (dataShow) {
                if ("hidden" in dataShow) {
                    hidden = dataShow.hidden;
                }
            } else {
                dataShow = data_priv.access(elem, "fxshow", {});
            }
            if (toggle) {
                dataShow.hidden = !hidden;
            }
            if (hidden) {
                jQuery(elem).show();
            } else {
                anim.done(function () {
                    jQuery(elem).hide();
                });
            }
            anim.done(function () {
                var prop;
                data_priv.remove(elem, "fxshow");
                for (prop in orig) {
                    jQuery.style(elem, prop, orig[prop]);
                }
            });
            for (prop in orig) {
                tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
                if (!(prop in dataShow)) {
                    dataShow[prop] = tween.start;
                    if (hidden) {
                        tween.end = tween.start;
                        tween.start = prop === "width" || prop === "height" ? 1 : 0;
                    }
                }
            }
        }
    }

    function Tween(elem, options, prop, end, easing) {
        return new Tween.prototype.init(elem, options, prop, end, easing);
    }
    jQuery.Tween = Tween;
    Tween.prototype = {
        constructor: Tween,
        init: function (elem, options, prop, end, easing, unit) {
            this.elem = elem;
            this.prop = prop;
            this.easing = easing || "swing";
            this.options = options;
            this.start = this.now = this.cur();
            this.end = end;
            this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
        },
        cur: function () {
            var hooks = Tween.propHooks[this.prop];
            return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
        },
        run: function (percent) {
            var eased, hooks = Tween.propHooks[this.prop];
            if (this.options.duration) {
                this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0,
                    1, this.options.duration);
            } else {
                this.pos = eased = percent;
            }
            this.now = (this.end - this.start) * eased + this.start;
            if (this.options.step) {
                this.options.step.call(this.elem, this.now, this);
            }
            if (hooks && hooks.set) {
                hooks.set(this);
            } else {
                Tween.propHooks._default.set(this);
            }
            return this;
        }
    };
    Tween.prototype.init.prototype = Tween.prototype;
    Tween.propHooks = {
        _default: {
            get: function (tween) {
                var result;
                if (tween.elem[tween.prop] != null && (!tween.elem.style || tween.elem.style[tween.prop] ==
                    null)) {
                    return tween.elem[tween.prop];
                }
                result = jQuery.css(tween.elem, tween.prop, "");
                return !result || result === "auto" ? 0 : result;
            },
            set: function (tween) {
                if (jQuery.fx.step[tween.prop]) {
                    jQuery.fx.step[tween.prop](tween);
                } else if (tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null ||
                    jQuery.cssHooks[tween.prop])) {
                    jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
                } else {
                    tween.elem[tween.prop] = tween.now;
                }
            }
        }
    };
    Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = { // 处理滚动条运动到什么位置
        set: function (tween) {
            if (tween.elem.nodeType && tween.elem.parentNode) {
                tween.elem[tween.prop] = tween.now;
            }
        }
    };
    jQuery.each(["toggle", "show", "hide"], function (i, name) { // 三个动画函数
        var cssFn = jQuery.fn[name];
        jQuery.fn[name] = function (speed, easing, callback) {
            return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(
                genFx(name, true), speed, easing, callback); // 调用 animate
        };
    });
    jQuery.fn.extend({
        fadeTo: function (speed, to, easing, callback) {
            return this.filter(isHidden).css("opacity", 0).show().end().animate({
                opacity: to
            }, speed, easing, callback); // 针对隐藏元素，先设置透明度为 0，显示出来再运动
        },
        animate: function (prop, speed, easing, callback) {
            var empty = jQuery.isEmptyObject(prop),
                optall = jQuery.speed(speed, easing, callback), // 对参数进行全新的配置，出队在 complete 中自动调用
                doAnimation = function () {
                    var anim = Animation(this, jQuery.extend({}, prop), optall);
                    if (empty || data_priv.get(this, "finish")) {
                        anim.stop(true);
                    }
                };
            doAnimation.finish = doAnimation;
            return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue,
                doAnimation); // 一旦第一个参数不为空，有队列名 -> 遍历, 或者入队
        },
        stop: function (type, clearQueue, gotoEnd) {
            var stopQueue = function (hooks) {
                var stop = hooks.stop;
                delete hooks.stop;
                stop(gotoEnd);
            };
            if (typeof type !== "string") {
                gotoEnd = clearQueue;
                clearQueue = type;
                type = undefined;
            }
            if (clearQueue && type !== false) {
                this.queue(type || "fx", []);
            }
            return this.each(function () {
                var dequeue = true,
                    index = type != null && type + "queueHooks",
                    timers = jQuery.timers,
                    data = data_priv.get(this);
                if (index) {
                    if (data[index] && data[index].stop) {
                        stopQueue(data[index]);
                    }
                } else {
                    for (index in data) {
                        if (data[index] && data[index].stop && rrun.test(index)) {
                            stopQueue(data[index]);
                        }
                    }
                }
                for (index = timers.length; index--;) {
                    if (timers[index].elem === this && (type == null || timers[index].queue ===
                        type)) {
                        timers[index].anim.stop(gotoEnd);
                        dequeue = false;
                        timers.splice(index, 1);
                    }
                }
                if (dequeue || !gotoEnd) {
                    jQuery.dequeue(this, type);
                }
            });
        },
        finish: function (type) {
            if (type !== false) {
                type = type || "fx";
            }
            return this.each(function () {
                var index, data = data_priv.get(this),
                    queue = data[type + "queue"],
                    hooks = data[type + "queueHooks"],
                    timers = jQuery.timers,
                    length = queue ? queue.length : 0;
                data.finish = true;
                jQuery.queue(this, type, []);
                if (hooks && hooks.stop) {
                    hooks.stop.call(this, true);
                }
                for (index = timers.length; index--;) {
                    if (timers[index].elem === this && timers[index].queue === type) {
                        timers[index].anim.stop(true);
                        timers.splice(index, 1);
                    }
                }
                for (index = 0; index < length; index++) {
                    if (queue[index] && queue[index].finish) {
                        queue[index].finish.call(this);
                    }
                }
                delete data.finish;
            });
        }
    });

    function genFx(type, includeWidth) { // 组织对应的 属性
        var which, attrs = {
            height: type
        },
            i = 0;
        includeWidth = includeWidth ? 1 : 0;
        for (; i < 4; i += 2 - includeWidth) {
            which = cssExpand[i];
            attrs["margin" + which] = attrs["padding" + which] = type;
        }
        if (includeWidth) {
            attrs.opacity = attrs.width = type;
        }
        return attrs;
    }
    jQuery.each({ // 定义一些方法
        slideDown: genFx("show"),
        slideUp: genFx("hide"),
        slideToggle: genFx("toggle"),
        fadeIn: {
            opacity: "show"
        },
        fadeOut: {
            opacity: "hide"
        },
        fadeToggle: {
            opacity: "toggle"
        }
    }, function (name, props) {
        jQuery.fn[name] = function (speed, easing, callback) {
            return this.animate(props, speed, easing, callback);
        };
    });
    jQuery.speed = function (speed, easing, fn) { // 进行参数的配置
        var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
            complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
            duration: speed,
            easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
        };
        opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration : opt.duration in
            jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;
        if (opt.queue == null || opt.queue === true) {
            opt.queue = "fx";
        }
        opt.old = opt.complete;
        opt.complete = function () { // 添加 出队操作
            if (jQuery.isFunction(opt.old)) {
                opt.old.call(this);
            }
            if (opt.queue) {
                jQuery.dequeue(this, opt.queue);
            }
        };
        return opt;
    };
    jQuery.easing = { // 运动时间曲线
        linear: function (p) {
            return p;
        },
        swing: function (p) {
            return 0.5 - Math.cos(p * Math.PI) / 2;
        }
    };
    jQuery.timers = [];
    jQuery.fx = Tween.prototype.init;
    jQuery.fx.tick = function () {
        var timer, timers = jQuery.timers,
            i = 0;
        fxNow = jQuery.now();
        for (; i < timers.length; i++) {
            timer = timers[i]; // 这里 timer 就是 Animation[p#5463] 中的 tick 方法
            if (!timer() && timers[i] === timer) { // 不断调用
                timers.splice(i--, 1);
            }
        }
        if (!timers.length) { // 知道长度为 0 时，停止调用
            jQuery.fx.stop();
        }
        fxNow = undefined;
    };
    jQuery.fx.timer = function (timer) { // 定时器做不断的变化
        if (timer() && jQuery.timers.push(timer)) {
            jQuery.fx.start();
        }
    };
    jQuery.fx.interval = 13;
    jQuery.fx.start = function () {
        if (!timerId) { // 设置定时器，interval 是 13 ms, 一秒钟大概变换6次
            timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval);
        }
    };
    jQuery.fx.stop = function () {
        clearInterval(timerId);
        timerId = null;
    };
    jQuery.fx.speeds = {
        slow: 600,
        fast: 200,
        _default: 400
    };
    jQuery.fx.step = {};
    if (jQuery.expr && jQuery.expr.filters) {
        jQuery.expr.filters.animated = function (elem) {
            return jQuery.grep(jQuery.timers, function (fn) {
                return elem === fn.elem;
            }).length;
        };
    }
    // offset() 位置和尺寸的方法
    jQuery.fn.offset = function (options) {
        if (arguments.length) {
            return options === undefined ? this : this.each(function (i) {
                jQuery.offset.setOffset(this, options, i);
            });
        }
        var docElem, win, elem = this[0],
            box = {
                top: 0,
                left: 0
            },
            doc = elem && elem.ownerDocument;
        if (!doc) {
            return;
        }
        docElem = doc.documentElement;
        if (!jQuery.contains(docElem, elem)) {
            return box;
        }
        if (typeof elem.getBoundingClientRect !== core_strundefined) {
            box = elem.getBoundingClientRect(); // 通过这个方法获取一些值
        }
        win = getWindow(doc);
        return {
            top: box.top + win.pageYOffset - docElem.clientTop,
            left: box.left + win.pageXOffset - docElem.clientLeft
        };
    };
    jQuery.offset = {
        setOffset: function (elem, options, i) {
            var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position =
                jQuery.css(elem, "position"),
                curElem = jQuery(elem),
                props = {};
            if (position === "static") {
                elem.style.position = "relative";
            }
            curOffset = curElem.offset();
            curCSSTop = jQuery.css(elem, "top");
            curCSSLeft = jQuery.css(elem, "left");
            calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop +
                curCSSLeft).indexOf("auto") > -1;
            if (calculatePosition) {
                curPosition = curElem.position();
                curTop = curPosition.top;
                curLeft = curPosition.left;
            } else {
                curTop = parseFloat(curCSSTop) || 0;
                curLeft = parseFloat(curCSSLeft) || 0;
            }
            if (jQuery.isFunction(options)) {
                options = options.call(elem, i, curOffset);
            }
            if (options.top != null) {
                props.top = (options.top - curOffset.top) + curTop;
            }
            if (options.left != null) {
                props.left = (options.left - curOffset.left) + curLeft;
            }
            if ("using" in options) {
                options.using.call(elem, props);
            } else {
                curElem.css(props);
            }
        }
    };
    jQuery.fn.extend({
        position: function () {
            if (!this[0]) {
                return;
            }
            var offsetParent, offset, elem = this[0],
                parentOffset = {
                    top: 0,
                    left: 0
                };
            if (jQuery.css(elem, "position") === "fixed") {
                offset = elem.getBoundingClientRect();
            } else {
                offsetParent = this.offsetParent();
                offset = this.offset();
                if (!jQuery.nodeName(offsetParent[0], "html")) {
                    parentOffset = offsetParent.offset();
                }
                parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", true);
                parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", true);
            }
            return {
                top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
                left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
            };
        },
        offsetParent: function () {
            return this.map(function () {
                var offsetParent = this.offsetParent || docElem;
                while (offsetParent && (!jQuery.nodeName(offsetParent, "html") && jQuery.css(
                    offsetParent, "position") === "static")) {
                    offsetParent = offsetParent.offsetParent;
                }
                return offsetParent || docElem;
            });
        }
    });
    jQuery.each({
        scrollLeft: "pageXOffset",
        scrollTop: "pageYOffset"
    }, function (method, prop) {
        var top = "pageYOffset" === prop;
        jQuery.fn[method] = function (val) {
            return jQuery.access(this, function (elem, method, val) {
                var win = getWindow(elem);
                if (val === undefined) {
                    return win ? win[prop] : elem[method];
                }
                if (win) {
                    win.scrollTo(!top ? val : window.pageXOffset, top ? val : window.pageYOffset);
                } else {
                    elem[method] = val;
                }
            }, method, val, arguments.length, null);
        };
    });

    function getWindow(elem) {
        return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView;
    }
    jQuery.each({ // 通过 两个 each 遍历实现
        Height: "height",
        Width: "width"
    }, function (name, type) {
        jQuery.each({
            padding: "inner" + name,
            content: type,
            "": "outer" + name
        }, function (defaultExtra, funcName) {
            jQuery.fn[funcName] = function (margin, value) {
                var chainable = arguments.length && (defaultExtra || typeof margin !==
                    "boolean"),
                    extra = defaultExtra || (margin === true || value === true ? "margin" :
                        "border");
                return jQuery.access(this, function (elem, type, value) {
                    var doc;
                    if (jQuery.isWindow(elem)) { // 处理 $(window).width() | $(document).height() 
                        return elem.document.documentElement["client" + name];
                    }
                    if (elem.nodeType === 9) {
                        doc = elem.documentElement;
                        return Math.max(elem.body["scroll" + name], doc["scroll" + name],
                            elem.body["offset" + name], doc["offset" + name], doc[
                        "client" + name]);
                    }
                    return value === undefined ? jQuery.css(elem, type, extra) : jQuery
                        .style(elem, type, value, extra); // 设置调用 style , 获取调用 css 方法, extra 参数 都需要传
                }, type, chainable ? margin : undefined, chainable, null);
            };
        });
    });
    jQuery.fn.size = function () {
        return this.length;
    };
    jQuery.fn.andSelf = jQuery.fn.addBack;
    if (typeof module === "object" && module && typeof module.exports === "object") {
        module.exports = jQuery;
    } else {
        if (typeof define === "function" && define.amd) {
            define("jquery", [], function () {
                return jQuery;
            });
        }
    }
    if (typeof window === "object" && typeof window.document === "object") {
        window.jQuery = window.$ = jQuery;
    }
})(window);